/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Datatypes.ChannelData;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class IndexMetadataRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2127240661246004387L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IndexMetadataRecord\",\"namespace\":\"Energistics.Etp.v12.Datatypes.ChannelData\",\"fields\":[{\"name\":\"indexKind\",\"type\":{\"type\":\"enum\",\"name\":\"ChannelIndexKind\",\"symbols\":[\"DateTime\",\"ElapsedTime\",\"MeasuredDepth\",\"TrueVerticalDepth\",\"PassIndexedDepth\",\"Pressure\",\"Temperature\",\"Scalar\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind\",\"depends\":[]},\"default\":\"DateTime\"},{\"name\":\"interval\",\"type\":{\"type\":\"record\",\"name\":\"IndexInterval\",\"namespace\":\"Energistics.Etp.v12.Datatypes.Object\",\"fields\":[{\"name\":\"startIndex\",\"type\":{\"type\":\"record\",\"name\":\"IndexValue\",\"namespace\":\"Energistics.Etp.v12.Datatypes\",\"fields\":[{\"name\":\"item\",\"type\":[\"null\",\"long\",\"double\",{\"type\":\"record\",\"name\":\"PassIndexedDepth\",\"namespace\":\"Energistics.Etp.v12.Datatypes.ChannelData\",\"fields\":[{\"name\":\"pass\",\"type\":\"long\"},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"PassDirection\",\"symbols\":[\"Up\",\"HoldingSteady\",\"Down\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.PassDirection\",\"depends\":[]}},{\"name\":\"depth\",\"type\":\"double\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.PassIndexedDepth\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ChannelData.PassDirection\"]}]}],\"fullName\":\"Energistics.Etp.v12.Datatypes.IndexValue\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ChannelData.PassIndexedDepth\"]}},{\"name\":\"endIndex\",\"type\":\"Energistics.Etp.v12.Datatypes.IndexValue\"},{\"name\":\"uom\",\"type\":\"string\"},{\"name\":\"depthDatum\",\"type\":\"string\",\"default\":\"\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.IndexInterval\",\"depends\":[\"Energistics.Etp.v12.Datatypes.IndexValue\",\"Energistics.Etp.v12.Datatypes.IndexValue\"]}},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"IndexDirection\",\"symbols\":[\"Increasing\",\"Decreasing\",\"Unordered\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection\",\"depends\":[]},\"default\":\"Increasing\"},{\"name\":\"name\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"uom\",\"type\":\"string\"},{\"name\":\"depthDatum\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"indexPropertyKindUri\",\"type\":\"string\"},{\"name\":\"filterable\",\"type\":\"boolean\",\"default\":true}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind\",\"Energistics.Etp.v12.Datatypes.Object.IndexInterval\",\"Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<IndexMetadataRecord> ENCODER =
      new BinaryMessageEncoder<IndexMetadataRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IndexMetadataRecord> DECODER =
      new BinaryMessageDecoder<IndexMetadataRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<IndexMetadataRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<IndexMetadataRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<IndexMetadataRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<IndexMetadataRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this IndexMetadataRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a IndexMetadataRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a IndexMetadataRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static IndexMetadataRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind indexKind;
   private Energistics.Etp.v12.Datatypes.Object.IndexInterval interval;
   private Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection direction;
   private java.lang.CharSequence name;
   private java.lang.CharSequence uom;
   private java.lang.CharSequence depthDatum;
   private java.lang.CharSequence indexPropertyKindUri;
   private boolean filterable;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IndexMetadataRecord() {}

  /**
   * All-args constructor.
   * @param indexKind The new value for indexKind
   * @param interval The new value for interval
   * @param direction The new value for direction
   * @param name The new value for name
   * @param uom The new value for uom
   * @param depthDatum The new value for depthDatum
   * @param indexPropertyKindUri The new value for indexPropertyKindUri
   * @param filterable The new value for filterable
   */
  public IndexMetadataRecord(Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind indexKind, Energistics.Etp.v12.Datatypes.Object.IndexInterval interval, Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection direction, java.lang.CharSequence name, java.lang.CharSequence uom, java.lang.CharSequence depthDatum, java.lang.CharSequence indexPropertyKindUri, java.lang.Boolean filterable) {
    this.indexKind = indexKind;
    this.interval = interval;
    this.direction = direction;
    this.name = name;
    this.uom = uom;
    this.depthDatum = depthDatum;
    this.indexPropertyKindUri = indexPropertyKindUri;
    this.filterable = filterable;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return indexKind;
    case 1: return interval;
    case 2: return direction;
    case 3: return name;
    case 4: return uom;
    case 5: return depthDatum;
    case 6: return indexPropertyKindUri;
    case 7: return filterable;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: indexKind = (Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind)value$; break;
    case 1: interval = (Energistics.Etp.v12.Datatypes.Object.IndexInterval)value$; break;
    case 2: direction = (Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection)value$; break;
    case 3: name = (java.lang.CharSequence)value$; break;
    case 4: uom = (java.lang.CharSequence)value$; break;
    case 5: depthDatum = (java.lang.CharSequence)value$; break;
    case 6: indexPropertyKindUri = (java.lang.CharSequence)value$; break;
    case 7: filterable = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'indexKind' field.
   * @return The value of the 'indexKind' field.
   */
  public Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind getIndexKind() {
    return indexKind;
  }


  /**
   * Sets the value of the 'indexKind' field.
   * @param value the value to set.
   */
  public void setIndexKind(Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind value) {
    this.indexKind = value;
  }

  /**
   * Gets the value of the 'interval' field.
   * @return The value of the 'interval' field.
   */
  public Energistics.Etp.v12.Datatypes.Object.IndexInterval getInterval() {
    return interval;
  }


  /**
   * Sets the value of the 'interval' field.
   * @param value the value to set.
   */
  public void setInterval(Energistics.Etp.v12.Datatypes.Object.IndexInterval value) {
    this.interval = value;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection getDirection() {
    return direction;
  }


  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'uom' field.
   * @return The value of the 'uom' field.
   */
  public java.lang.CharSequence getUom() {
    return uom;
  }


  /**
   * Sets the value of the 'uom' field.
   * @param value the value to set.
   */
  public void setUom(java.lang.CharSequence value) {
    this.uom = value;
  }

  /**
   * Gets the value of the 'depthDatum' field.
   * @return The value of the 'depthDatum' field.
   */
  public java.lang.CharSequence getDepthDatum() {
    return depthDatum;
  }


  /**
   * Sets the value of the 'depthDatum' field.
   * @param value the value to set.
   */
  public void setDepthDatum(java.lang.CharSequence value) {
    this.depthDatum = value;
  }

  /**
   * Gets the value of the 'indexPropertyKindUri' field.
   * @return The value of the 'indexPropertyKindUri' field.
   */
  public java.lang.CharSequence getIndexPropertyKindUri() {
    return indexPropertyKindUri;
  }


  /**
   * Sets the value of the 'indexPropertyKindUri' field.
   * @param value the value to set.
   */
  public void setIndexPropertyKindUri(java.lang.CharSequence value) {
    this.indexPropertyKindUri = value;
  }

  /**
   * Gets the value of the 'filterable' field.
   * @return The value of the 'filterable' field.
   */
  public boolean getFilterable() {
    return filterable;
  }


  /**
   * Sets the value of the 'filterable' field.
   * @param value the value to set.
   */
  public void setFilterable(boolean value) {
    this.filterable = value;
  }

  /**
   * Creates a new IndexMetadataRecord RecordBuilder.
   * @return A new IndexMetadataRecord RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder newBuilder() {
    return new Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder();
  }

  /**
   * Creates a new IndexMetadataRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IndexMetadataRecord RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder newBuilder(Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder(other);
    }
  }

  /**
   * Creates a new IndexMetadataRecord RecordBuilder by copying an existing IndexMetadataRecord instance.
   * @param other The existing instance to copy.
   * @return A new IndexMetadataRecord RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder newBuilder(Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for IndexMetadataRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IndexMetadataRecord>
    implements org.apache.avro.data.RecordBuilder<IndexMetadataRecord> {

    private Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind indexKind;
    private Energistics.Etp.v12.Datatypes.Object.IndexInterval interval;
    private Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder intervalBuilder;
    private Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection direction;
    private java.lang.CharSequence name;
    private java.lang.CharSequence uom;
    private java.lang.CharSequence depthDatum;
    private java.lang.CharSequence indexPropertyKindUri;
    private boolean filterable;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.indexKind)) {
        this.indexKind = data().deepCopy(fields()[0].schema(), other.indexKind);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.interval)) {
        this.interval = data().deepCopy(fields()[1].schema(), other.interval);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasIntervalBuilder()) {
        this.intervalBuilder = Energistics.Etp.v12.Datatypes.Object.IndexInterval.newBuilder(other.getIntervalBuilder());
      }
      if (isValidValue(fields()[2], other.direction)) {
        this.direction = data().deepCopy(fields()[2].schema(), other.direction);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.uom)) {
        this.uom = data().deepCopy(fields()[4].schema(), other.uom);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.depthDatum)) {
        this.depthDatum = data().deepCopy(fields()[5].schema(), other.depthDatum);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.indexPropertyKindUri)) {
        this.indexPropertyKindUri = data().deepCopy(fields()[6].schema(), other.indexPropertyKindUri);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.filterable)) {
        this.filterable = data().deepCopy(fields()[7].schema(), other.filterable);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing IndexMetadataRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.indexKind)) {
        this.indexKind = data().deepCopy(fields()[0].schema(), other.indexKind);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.interval)) {
        this.interval = data().deepCopy(fields()[1].schema(), other.interval);
        fieldSetFlags()[1] = true;
      }
      this.intervalBuilder = null;
      if (isValidValue(fields()[2], other.direction)) {
        this.direction = data().deepCopy(fields()[2].schema(), other.direction);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.uom)) {
        this.uom = data().deepCopy(fields()[4].schema(), other.uom);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.depthDatum)) {
        this.depthDatum = data().deepCopy(fields()[5].schema(), other.depthDatum);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.indexPropertyKindUri)) {
        this.indexPropertyKindUri = data().deepCopy(fields()[6].schema(), other.indexPropertyKindUri);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.filterable)) {
        this.filterable = data().deepCopy(fields()[7].schema(), other.filterable);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'indexKind' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind getIndexKind() {
      return indexKind;
    }


    /**
      * Sets the value of the 'indexKind' field.
      * @param value The value of 'indexKind'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder setIndexKind(Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind value) {
      validate(fields()[0], value);
      this.indexKind = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'indexKind' field has been set.
      * @return True if the 'indexKind' field has been set, false otherwise.
      */
    public boolean hasIndexKind() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'indexKind' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder clearIndexKind() {
      indexKind = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'interval' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval getInterval() {
      return interval;
    }


    /**
      * Sets the value of the 'interval' field.
      * @param value The value of 'interval'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder setInterval(Energistics.Etp.v12.Datatypes.Object.IndexInterval value) {
      validate(fields()[1], value);
      this.intervalBuilder = null;
      this.interval = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'interval' field has been set.
      * @return True if the 'interval' field has been set, false otherwise.
      */
    public boolean hasInterval() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'interval' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder getIntervalBuilder() {
      if (intervalBuilder == null) {
        if (hasInterval()) {
          setIntervalBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.newBuilder(interval));
        } else {
          setIntervalBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.newBuilder());
        }
      }
      return intervalBuilder;
    }

    /**
     * Sets the Builder instance for the 'interval' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder setIntervalBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder value) {
      clearInterval();
      intervalBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'interval' field has an active Builder instance
     * @return True if the 'interval' field has an active Builder instance
     */
    public boolean hasIntervalBuilder() {
      return intervalBuilder != null;
    }

    /**
      * Clears the value of the 'interval' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder clearInterval() {
      interval = null;
      intervalBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection getDirection() {
      return direction;
    }


    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder setDirection(Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection value) {
      validate(fields()[2], value);
      this.direction = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'uom' field.
      * @return The value.
      */
    public java.lang.CharSequence getUom() {
      return uom;
    }


    /**
      * Sets the value of the 'uom' field.
      * @param value The value of 'uom'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder setUom(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.uom = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'uom' field has been set.
      * @return True if the 'uom' field has been set, false otherwise.
      */
    public boolean hasUom() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'uom' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder clearUom() {
      uom = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'depthDatum' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepthDatum() {
      return depthDatum;
    }


    /**
      * Sets the value of the 'depthDatum' field.
      * @param value The value of 'depthDatum'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder setDepthDatum(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.depthDatum = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'depthDatum' field has been set.
      * @return True if the 'depthDatum' field has been set, false otherwise.
      */
    public boolean hasDepthDatum() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'depthDatum' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder clearDepthDatum() {
      depthDatum = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'indexPropertyKindUri' field.
      * @return The value.
      */
    public java.lang.CharSequence getIndexPropertyKindUri() {
      return indexPropertyKindUri;
    }


    /**
      * Sets the value of the 'indexPropertyKindUri' field.
      * @param value The value of 'indexPropertyKindUri'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder setIndexPropertyKindUri(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.indexPropertyKindUri = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'indexPropertyKindUri' field has been set.
      * @return True if the 'indexPropertyKindUri' field has been set, false otherwise.
      */
    public boolean hasIndexPropertyKindUri() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'indexPropertyKindUri' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder clearIndexPropertyKindUri() {
      indexPropertyKindUri = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'filterable' field.
      * @return The value.
      */
    public boolean getFilterable() {
      return filterable;
    }


    /**
      * Sets the value of the 'filterable' field.
      * @param value The value of 'filterable'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder setFilterable(boolean value) {
      validate(fields()[7], value);
      this.filterable = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'filterable' field has been set.
      * @return True if the 'filterable' field has been set, false otherwise.
      */
    public boolean hasFilterable() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'filterable' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.ChannelData.IndexMetadataRecord.Builder clearFilterable() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IndexMetadataRecord build() {
      try {
        IndexMetadataRecord record = new IndexMetadataRecord();
        record.indexKind = fieldSetFlags()[0] ? this.indexKind : (Energistics.Etp.v12.Datatypes.ChannelData.ChannelIndexKind) defaultValue(fields()[0]);
        if (intervalBuilder != null) {
          try {
            record.interval = this.intervalBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("interval"));
            throw e;
          }
        } else {
          record.interval = fieldSetFlags()[1] ? this.interval : (Energistics.Etp.v12.Datatypes.Object.IndexInterval) defaultValue(fields()[1]);
        }
        record.direction = fieldSetFlags()[2] ? this.direction : (Energistics.Etp.v12.Datatypes.ChannelData.IndexDirection) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.uom = fieldSetFlags()[4] ? this.uom : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.depthDatum = fieldSetFlags()[5] ? this.depthDatum : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.indexPropertyKindUri = fieldSetFlags()[6] ? this.indexPropertyKindUri : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.filterable = fieldSetFlags()[7] ? this.filterable : (java.lang.Boolean) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IndexMetadataRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<IndexMetadataRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IndexMetadataRecord>
    READER$ = (org.apache.avro.io.DatumReader<IndexMetadataRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










