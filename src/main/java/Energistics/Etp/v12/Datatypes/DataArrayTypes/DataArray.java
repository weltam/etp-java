/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Datatypes.DataArrayTypes;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DataArray extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3184683792296011479L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataArray\",\"namespace\":\"Energistics.Etp.v12.Datatypes.DataArrayTypes\",\"fields\":[{\"name\":\"dimensions\",\"type\":{\"type\":\"array\",\"items\":\"long\"}},{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"AnyArray\",\"namespace\":\"Energistics.Etp.v12.Datatypes\",\"fields\":[{\"name\":\"item\",\"type\":[{\"type\":\"record\",\"name\":\"ArrayOfBoolean\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"boolean\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfBoolean\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfInt\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfInt\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfLong\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"long\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfLong\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfFloat\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"float\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfFloat\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfDouble\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfDouble\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfString\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfString\",\"depends\":[]},\"bytes\"]}],\"fullName\":\"Energistics.Etp.v12.Datatypes.AnyArray\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ArrayOfBoolean\",\"Energistics.Etp.v12.Datatypes.ArrayOfInt\",\"Energistics.Etp.v12.Datatypes.ArrayOfLong\",\"Energistics.Etp.v12.Datatypes.ArrayOfFloat\",\"Energistics.Etp.v12.Datatypes.ArrayOfDouble\",\"Energistics.Etp.v12.Datatypes.ArrayOfString\"]}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray\",\"depends\":[\"Energistics.Etp.v12.Datatypes.AnyArray\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DataArray> ENCODER =
      new BinaryMessageEncoder<DataArray>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataArray> DECODER =
      new BinaryMessageDecoder<DataArray>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DataArray> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DataArray> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DataArray> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DataArray>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DataArray to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DataArray from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DataArray instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DataArray fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.util.List<java.lang.Long> dimensions;
   private Energistics.Etp.v12.Datatypes.AnyArray data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataArray() {}

  /**
   * All-args constructor.
   * @param dimensions The new value for dimensions
   * @param data The new value for data
   */
  public DataArray(java.util.List<java.lang.Long> dimensions, Energistics.Etp.v12.Datatypes.AnyArray data) {
    this.dimensions = dimensions;
    this.data = data;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dimensions;
    case 1: return data;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dimensions = (java.util.List<java.lang.Long>)value$; break;
    case 1: data = (Energistics.Etp.v12.Datatypes.AnyArray)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'dimensions' field.
   * @return The value of the 'dimensions' field.
   */
  public java.util.List<java.lang.Long> getDimensions() {
    return dimensions;
  }


  /**
   * Sets the value of the 'dimensions' field.
   * @param value the value to set.
   */
  public void setDimensions(java.util.List<java.lang.Long> value) {
    this.dimensions = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return The value of the 'data' field.
   */
  public Energistics.Etp.v12.Datatypes.AnyArray getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(Energistics.Etp.v12.Datatypes.AnyArray value) {
    this.data = value;
  }

  /**
   * Creates a new DataArray RecordBuilder.
   * @return A new DataArray RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder newBuilder() {
    return new Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder();
  }

  /**
   * Creates a new DataArray RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataArray RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder newBuilder(Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder(other);
    }
  }

  /**
   * Creates a new DataArray RecordBuilder by copying an existing DataArray instance.
   * @param other The existing instance to copy.
   * @return A new DataArray RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder newBuilder(Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder(other);
    }
  }

  /**
   * RecordBuilder for DataArray instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataArray>
    implements org.apache.avro.data.RecordBuilder<DataArray> {

    private java.util.List<java.lang.Long> dimensions;
    private Energistics.Etp.v12.Datatypes.AnyArray data;
    private Energistics.Etp.v12.Datatypes.AnyArray.Builder dataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dimensions)) {
        this.dimensions = data().deepCopy(fields()[0].schema(), other.dimensions);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasDataBuilder()) {
        this.dataBuilder = Energistics.Etp.v12.Datatypes.AnyArray.newBuilder(other.getDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing DataArray instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.dimensions)) {
        this.dimensions = data().deepCopy(fields()[0].schema(), other.dimensions);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      this.dataBuilder = null;
    }

    /**
      * Gets the value of the 'dimensions' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getDimensions() {
      return dimensions;
    }


    /**
      * Sets the value of the 'dimensions' field.
      * @param value The value of 'dimensions'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder setDimensions(java.util.List<java.lang.Long> value) {
      validate(fields()[0], value);
      this.dimensions = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dimensions' field has been set.
      * @return True if the 'dimensions' field has been set, false otherwise.
      */
    public boolean hasDimensions() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dimensions' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder clearDimensions() {
      dimensions = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.AnyArray getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * @param value The value of 'data'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder setData(Energistics.Etp.v12.Datatypes.AnyArray value) {
      validate(fields()[1], value);
      this.dataBuilder = null;
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'data' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Energistics.Etp.v12.Datatypes.AnyArray.Builder getDataBuilder() {
      if (dataBuilder == null) {
        if (hasData()) {
          setDataBuilder(Energistics.Etp.v12.Datatypes.AnyArray.newBuilder(data));
        } else {
          setDataBuilder(Energistics.Etp.v12.Datatypes.AnyArray.newBuilder());
        }
      }
      return dataBuilder;
    }

    /**
     * Sets the Builder instance for the 'data' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder setDataBuilder(Energistics.Etp.v12.Datatypes.AnyArray.Builder value) {
      clearData();
      dataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'data' field has an active Builder instance
     * @return True if the 'data' field has an active Builder instance
     */
    public boolean hasDataBuilder() {
      return dataBuilder != null;
    }

    /**
      * Clears the value of the 'data' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.DataArrayTypes.DataArray.Builder clearData() {
      data = null;
      dataBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataArray build() {
      try {
        DataArray record = new DataArray();
        record.dimensions = fieldSetFlags()[0] ? this.dimensions : (java.util.List<java.lang.Long>) defaultValue(fields()[0]);
        if (dataBuilder != null) {
          try {
            record.data = this.dataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("data"));
            throw e;
          }
        } else {
          record.data = fieldSetFlags()[1] ? this.data : (Energistics.Etp.v12.Datatypes.AnyArray) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataArray>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataArray>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataArray>
    READER$ = (org.apache.avro.io.DatumReader<DataArray>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










