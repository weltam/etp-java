/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Datatypes.Object;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class IndexInterval extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4594552344347118352L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IndexInterval\",\"namespace\":\"Energistics.Etp.v12.Datatypes.Object\",\"fields\":[{\"name\":\"startIndex\",\"type\":{\"type\":\"record\",\"name\":\"IndexValue\",\"namespace\":\"Energistics.Etp.v12.Datatypes\",\"fields\":[{\"name\":\"item\",\"type\":[\"null\",\"long\",\"double\",{\"type\":\"record\",\"name\":\"PassIndexedDepth\",\"namespace\":\"Energistics.Etp.v12.Datatypes.ChannelData\",\"fields\":[{\"name\":\"pass\",\"type\":\"long\"},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"PassDirection\",\"symbols\":[\"Up\",\"HoldingSteady\",\"Down\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.PassDirection\",\"depends\":[]}},{\"name\":\"depth\",\"type\":\"double\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.PassIndexedDepth\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ChannelData.PassDirection\"]}]}],\"fullName\":\"Energistics.Etp.v12.Datatypes.IndexValue\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ChannelData.PassIndexedDepth\"]}},{\"name\":\"endIndex\",\"type\":\"Energistics.Etp.v12.Datatypes.IndexValue\"},{\"name\":\"uom\",\"type\":\"string\"},{\"name\":\"depthDatum\",\"type\":\"string\",\"default\":\"\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.IndexInterval\",\"depends\":[\"Energistics.Etp.v12.Datatypes.IndexValue\",\"Energistics.Etp.v12.Datatypes.IndexValue\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<IndexInterval> ENCODER =
      new BinaryMessageEncoder<IndexInterval>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IndexInterval> DECODER =
      new BinaryMessageDecoder<IndexInterval>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<IndexInterval> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<IndexInterval> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<IndexInterval> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<IndexInterval>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this IndexInterval to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a IndexInterval from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a IndexInterval instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static IndexInterval fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private Energistics.Etp.v12.Datatypes.IndexValue startIndex;
   private Energistics.Etp.v12.Datatypes.IndexValue endIndex;
   private java.lang.CharSequence uom;
   private java.lang.CharSequence depthDatum;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IndexInterval() {}

  /**
   * All-args constructor.
   * @param startIndex The new value for startIndex
   * @param endIndex The new value for endIndex
   * @param uom The new value for uom
   * @param depthDatum The new value for depthDatum
   */
  public IndexInterval(Energistics.Etp.v12.Datatypes.IndexValue startIndex, Energistics.Etp.v12.Datatypes.IndexValue endIndex, java.lang.CharSequence uom, java.lang.CharSequence depthDatum) {
    this.startIndex = startIndex;
    this.endIndex = endIndex;
    this.uom = uom;
    this.depthDatum = depthDatum;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return startIndex;
    case 1: return endIndex;
    case 2: return uom;
    case 3: return depthDatum;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: startIndex = (Energistics.Etp.v12.Datatypes.IndexValue)value$; break;
    case 1: endIndex = (Energistics.Etp.v12.Datatypes.IndexValue)value$; break;
    case 2: uom = (java.lang.CharSequence)value$; break;
    case 3: depthDatum = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'startIndex' field.
   * @return The value of the 'startIndex' field.
   */
  public Energistics.Etp.v12.Datatypes.IndexValue getStartIndex() {
    return startIndex;
  }


  /**
   * Sets the value of the 'startIndex' field.
   * @param value the value to set.
   */
  public void setStartIndex(Energistics.Etp.v12.Datatypes.IndexValue value) {
    this.startIndex = value;
  }

  /**
   * Gets the value of the 'endIndex' field.
   * @return The value of the 'endIndex' field.
   */
  public Energistics.Etp.v12.Datatypes.IndexValue getEndIndex() {
    return endIndex;
  }


  /**
   * Sets the value of the 'endIndex' field.
   * @param value the value to set.
   */
  public void setEndIndex(Energistics.Etp.v12.Datatypes.IndexValue value) {
    this.endIndex = value;
  }

  /**
   * Gets the value of the 'uom' field.
   * @return The value of the 'uom' field.
   */
  public java.lang.CharSequence getUom() {
    return uom;
  }


  /**
   * Sets the value of the 'uom' field.
   * @param value the value to set.
   */
  public void setUom(java.lang.CharSequence value) {
    this.uom = value;
  }

  /**
   * Gets the value of the 'depthDatum' field.
   * @return The value of the 'depthDatum' field.
   */
  public java.lang.CharSequence getDepthDatum() {
    return depthDatum;
  }


  /**
   * Sets the value of the 'depthDatum' field.
   * @param value the value to set.
   */
  public void setDepthDatum(java.lang.CharSequence value) {
    this.depthDatum = value;
  }

  /**
   * Creates a new IndexInterval RecordBuilder.
   * @return A new IndexInterval RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder newBuilder() {
    return new Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder();
  }

  /**
   * Creates a new IndexInterval RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IndexInterval RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder newBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder(other);
    }
  }

  /**
   * Creates a new IndexInterval RecordBuilder by copying an existing IndexInterval instance.
   * @param other The existing instance to copy.
   * @return A new IndexInterval RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder newBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder(other);
    }
  }

  /**
   * RecordBuilder for IndexInterval instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IndexInterval>
    implements org.apache.avro.data.RecordBuilder<IndexInterval> {

    private Energistics.Etp.v12.Datatypes.IndexValue startIndex;
    private Energistics.Etp.v12.Datatypes.IndexValue.Builder startIndexBuilder;
    private Energistics.Etp.v12.Datatypes.IndexValue endIndex;
    private Energistics.Etp.v12.Datatypes.IndexValue.Builder endIndexBuilder;
    private java.lang.CharSequence uom;
    private java.lang.CharSequence depthDatum;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.startIndex)) {
        this.startIndex = data().deepCopy(fields()[0].schema(), other.startIndex);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasStartIndexBuilder()) {
        this.startIndexBuilder = Energistics.Etp.v12.Datatypes.IndexValue.newBuilder(other.getStartIndexBuilder());
      }
      if (isValidValue(fields()[1], other.endIndex)) {
        this.endIndex = data().deepCopy(fields()[1].schema(), other.endIndex);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasEndIndexBuilder()) {
        this.endIndexBuilder = Energistics.Etp.v12.Datatypes.IndexValue.newBuilder(other.getEndIndexBuilder());
      }
      if (isValidValue(fields()[2], other.uom)) {
        this.uom = data().deepCopy(fields()[2].schema(), other.uom);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.depthDatum)) {
        this.depthDatum = data().deepCopy(fields()[3].schema(), other.depthDatum);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing IndexInterval instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.Object.IndexInterval other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.startIndex)) {
        this.startIndex = data().deepCopy(fields()[0].schema(), other.startIndex);
        fieldSetFlags()[0] = true;
      }
      this.startIndexBuilder = null;
      if (isValidValue(fields()[1], other.endIndex)) {
        this.endIndex = data().deepCopy(fields()[1].schema(), other.endIndex);
        fieldSetFlags()[1] = true;
      }
      this.endIndexBuilder = null;
      if (isValidValue(fields()[2], other.uom)) {
        this.uom = data().deepCopy(fields()[2].schema(), other.uom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.depthDatum)) {
        this.depthDatum = data().deepCopy(fields()[3].schema(), other.depthDatum);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'startIndex' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.IndexValue getStartIndex() {
      return startIndex;
    }


    /**
      * Sets the value of the 'startIndex' field.
      * @param value The value of 'startIndex'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder setStartIndex(Energistics.Etp.v12.Datatypes.IndexValue value) {
      validate(fields()[0], value);
      this.startIndexBuilder = null;
      this.startIndex = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'startIndex' field has been set.
      * @return True if the 'startIndex' field has been set, false otherwise.
      */
    public boolean hasStartIndex() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'startIndex' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Energistics.Etp.v12.Datatypes.IndexValue.Builder getStartIndexBuilder() {
      if (startIndexBuilder == null) {
        if (hasStartIndex()) {
          setStartIndexBuilder(Energistics.Etp.v12.Datatypes.IndexValue.newBuilder(startIndex));
        } else {
          setStartIndexBuilder(Energistics.Etp.v12.Datatypes.IndexValue.newBuilder());
        }
      }
      return startIndexBuilder;
    }

    /**
     * Sets the Builder instance for the 'startIndex' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder setStartIndexBuilder(Energistics.Etp.v12.Datatypes.IndexValue.Builder value) {
      clearStartIndex();
      startIndexBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'startIndex' field has an active Builder instance
     * @return True if the 'startIndex' field has an active Builder instance
     */
    public boolean hasStartIndexBuilder() {
      return startIndexBuilder != null;
    }

    /**
      * Clears the value of the 'startIndex' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder clearStartIndex() {
      startIndex = null;
      startIndexBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'endIndex' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.IndexValue getEndIndex() {
      return endIndex;
    }


    /**
      * Sets the value of the 'endIndex' field.
      * @param value The value of 'endIndex'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder setEndIndex(Energistics.Etp.v12.Datatypes.IndexValue value) {
      validate(fields()[1], value);
      this.endIndexBuilder = null;
      this.endIndex = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'endIndex' field has been set.
      * @return True if the 'endIndex' field has been set, false otherwise.
      */
    public boolean hasEndIndex() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'endIndex' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Energistics.Etp.v12.Datatypes.IndexValue.Builder getEndIndexBuilder() {
      if (endIndexBuilder == null) {
        if (hasEndIndex()) {
          setEndIndexBuilder(Energistics.Etp.v12.Datatypes.IndexValue.newBuilder(endIndex));
        } else {
          setEndIndexBuilder(Energistics.Etp.v12.Datatypes.IndexValue.newBuilder());
        }
      }
      return endIndexBuilder;
    }

    /**
     * Sets the Builder instance for the 'endIndex' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder setEndIndexBuilder(Energistics.Etp.v12.Datatypes.IndexValue.Builder value) {
      clearEndIndex();
      endIndexBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'endIndex' field has an active Builder instance
     * @return True if the 'endIndex' field has an active Builder instance
     */
    public boolean hasEndIndexBuilder() {
      return endIndexBuilder != null;
    }

    /**
      * Clears the value of the 'endIndex' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder clearEndIndex() {
      endIndex = null;
      endIndexBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'uom' field.
      * @return The value.
      */
    public java.lang.CharSequence getUom() {
      return uom;
    }


    /**
      * Sets the value of the 'uom' field.
      * @param value The value of 'uom'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder setUom(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.uom = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'uom' field has been set.
      * @return True if the 'uom' field has been set, false otherwise.
      */
    public boolean hasUom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'uom' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder clearUom() {
      uom = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'depthDatum' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepthDatum() {
      return depthDatum;
    }


    /**
      * Sets the value of the 'depthDatum' field.
      * @param value The value of 'depthDatum'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder setDepthDatum(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.depthDatum = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'depthDatum' field has been set.
      * @return True if the 'depthDatum' field has been set, false otherwise.
      */
    public boolean hasDepthDatum() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'depthDatum' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder clearDepthDatum() {
      depthDatum = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IndexInterval build() {
      try {
        IndexInterval record = new IndexInterval();
        if (startIndexBuilder != null) {
          try {
            record.startIndex = this.startIndexBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("startIndex"));
            throw e;
          }
        } else {
          record.startIndex = fieldSetFlags()[0] ? this.startIndex : (Energistics.Etp.v12.Datatypes.IndexValue) defaultValue(fields()[0]);
        }
        if (endIndexBuilder != null) {
          try {
            record.endIndex = this.endIndexBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("endIndex"));
            throw e;
          }
        } else {
          record.endIndex = fieldSetFlags()[1] ? this.endIndex : (Energistics.Etp.v12.Datatypes.IndexValue) defaultValue(fields()[1]);
        }
        record.uom = fieldSetFlags()[2] ? this.uom : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.depthDatum = fieldSetFlags()[3] ? this.depthDatum : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IndexInterval>
    WRITER$ = (org.apache.avro.io.DatumWriter<IndexInterval>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IndexInterval>
    READER$ = (org.apache.avro.io.DatumReader<IndexInterval>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










