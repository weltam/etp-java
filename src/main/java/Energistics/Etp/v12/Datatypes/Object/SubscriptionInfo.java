/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Datatypes.Object;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SubscriptionInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8304713349496537076L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SubscriptionInfo\",\"namespace\":\"Energistics.Etp.v12.Datatypes.Object\",\"fields\":[{\"name\":\"context\",\"type\":{\"type\":\"record\",\"name\":\"ContextInfo\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"depth\",\"type\":\"int\"},{\"name\":\"dataObjectTypes\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"navigableEdges\",\"type\":{\"type\":\"enum\",\"name\":\"RelationshipKind\",\"symbols\":[\"Primary\",\"Secondary\",\"Both\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.RelationshipKind\",\"depends\":[]}},{\"name\":\"includeSecondaryTargets\",\"type\":\"boolean\",\"default\":false},{\"name\":\"includeSecondarySources\",\"type\":\"boolean\",\"default\":false}],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.ContextInfo\",\"depends\":[\"Energistics.Etp.v12.Datatypes.Object.RelationshipKind\"]}},{\"name\":\"scope\",\"type\":{\"type\":\"enum\",\"name\":\"ContextScopeKind\",\"symbols\":[\"self\",\"sources\",\"targets\",\"sourcesOrSelf\",\"targetsOrSelf\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.ContextScopeKind\",\"depends\":[]}},{\"name\":\"requestUuid\",\"type\":{\"type\":\"fixed\",\"name\":\"Uuid\",\"namespace\":\"Energistics.Etp.v12.Datatypes\",\"size\":16,\"fullName\":\"Energistics.Etp.v12.Datatypes.Uuid\",\"depends\":[]}},{\"name\":\"includeObjectData\",\"type\":\"boolean\"},{\"name\":\"format\",\"type\":\"string\",\"default\":\"xml\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo\",\"depends\":[\"Energistics.Etp.v12.Datatypes.Object.ContextInfo\",\"Energistics.Etp.v12.Datatypes.Object.ContextScopeKind\",\"Energistics.Etp.v12.Datatypes.Uuid\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SubscriptionInfo> ENCODER =
      new BinaryMessageEncoder<SubscriptionInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SubscriptionInfo> DECODER =
      new BinaryMessageDecoder<SubscriptionInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SubscriptionInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SubscriptionInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SubscriptionInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SubscriptionInfo>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SubscriptionInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SubscriptionInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SubscriptionInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SubscriptionInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private Energistics.Etp.v12.Datatypes.Object.ContextInfo context;
   private Energistics.Etp.v12.Datatypes.Object.ContextScopeKind scope;
   private Energistics.Etp.v12.Datatypes.Uuid requestUuid;
   private boolean includeObjectData;
   private java.lang.CharSequence format;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SubscriptionInfo() {}

  /**
   * All-args constructor.
   * @param context The new value for context
   * @param scope The new value for scope
   * @param requestUuid The new value for requestUuid
   * @param includeObjectData The new value for includeObjectData
   * @param format The new value for format
   */
  public SubscriptionInfo(Energistics.Etp.v12.Datatypes.Object.ContextInfo context, Energistics.Etp.v12.Datatypes.Object.ContextScopeKind scope, Energistics.Etp.v12.Datatypes.Uuid requestUuid, java.lang.Boolean includeObjectData, java.lang.CharSequence format) {
    this.context = context;
    this.scope = scope;
    this.requestUuid = requestUuid;
    this.includeObjectData = includeObjectData;
    this.format = format;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return context;
    case 1: return scope;
    case 2: return requestUuid;
    case 3: return includeObjectData;
    case 4: return format;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: context = (Energistics.Etp.v12.Datatypes.Object.ContextInfo)value$; break;
    case 1: scope = (Energistics.Etp.v12.Datatypes.Object.ContextScopeKind)value$; break;
    case 2: requestUuid = (Energistics.Etp.v12.Datatypes.Uuid)value$; break;
    case 3: includeObjectData = (java.lang.Boolean)value$; break;
    case 4: format = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'context' field.
   * @return The value of the 'context' field.
   */
  public Energistics.Etp.v12.Datatypes.Object.ContextInfo getContext() {
    return context;
  }


  /**
   * Sets the value of the 'context' field.
   * @param value the value to set.
   */
  public void setContext(Energistics.Etp.v12.Datatypes.Object.ContextInfo value) {
    this.context = value;
  }

  /**
   * Gets the value of the 'scope' field.
   * @return The value of the 'scope' field.
   */
  public Energistics.Etp.v12.Datatypes.Object.ContextScopeKind getScope() {
    return scope;
  }


  /**
   * Sets the value of the 'scope' field.
   * @param value the value to set.
   */
  public void setScope(Energistics.Etp.v12.Datatypes.Object.ContextScopeKind value) {
    this.scope = value;
  }

  /**
   * Gets the value of the 'requestUuid' field.
   * @return The value of the 'requestUuid' field.
   */
  public Energistics.Etp.v12.Datatypes.Uuid getRequestUuid() {
    return requestUuid;
  }


  /**
   * Sets the value of the 'requestUuid' field.
   * @param value the value to set.
   */
  public void setRequestUuid(Energistics.Etp.v12.Datatypes.Uuid value) {
    this.requestUuid = value;
  }

  /**
   * Gets the value of the 'includeObjectData' field.
   * @return The value of the 'includeObjectData' field.
   */
  public boolean getIncludeObjectData() {
    return includeObjectData;
  }


  /**
   * Sets the value of the 'includeObjectData' field.
   * @param value the value to set.
   */
  public void setIncludeObjectData(boolean value) {
    this.includeObjectData = value;
  }

  /**
   * Gets the value of the 'format' field.
   * @return The value of the 'format' field.
   */
  public java.lang.CharSequence getFormat() {
    return format;
  }


  /**
   * Sets the value of the 'format' field.
   * @param value the value to set.
   */
  public void setFormat(java.lang.CharSequence value) {
    this.format = value;
  }

  /**
   * Creates a new SubscriptionInfo RecordBuilder.
   * @return A new SubscriptionInfo RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder newBuilder() {
    return new Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder();
  }

  /**
   * Creates a new SubscriptionInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SubscriptionInfo RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder newBuilder(Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder(other);
    }
  }

  /**
   * Creates a new SubscriptionInfo RecordBuilder by copying an existing SubscriptionInfo instance.
   * @param other The existing instance to copy.
   * @return A new SubscriptionInfo RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder newBuilder(Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for SubscriptionInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SubscriptionInfo>
    implements org.apache.avro.data.RecordBuilder<SubscriptionInfo> {

    private Energistics.Etp.v12.Datatypes.Object.ContextInfo context;
    private Energistics.Etp.v12.Datatypes.Object.ContextInfo.Builder contextBuilder;
    private Energistics.Etp.v12.Datatypes.Object.ContextScopeKind scope;
    private Energistics.Etp.v12.Datatypes.Uuid requestUuid;
    private boolean includeObjectData;
    private java.lang.CharSequence format;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.context)) {
        this.context = data().deepCopy(fields()[0].schema(), other.context);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasContextBuilder()) {
        this.contextBuilder = Energistics.Etp.v12.Datatypes.Object.ContextInfo.newBuilder(other.getContextBuilder());
      }
      if (isValidValue(fields()[1], other.scope)) {
        this.scope = data().deepCopy(fields()[1].schema(), other.scope);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.requestUuid)) {
        this.requestUuid = data().deepCopy(fields()[2].schema(), other.requestUuid);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.includeObjectData)) {
        this.includeObjectData = data().deepCopy(fields()[3].schema(), other.includeObjectData);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.format)) {
        this.format = data().deepCopy(fields()[4].schema(), other.format);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing SubscriptionInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.context)) {
        this.context = data().deepCopy(fields()[0].schema(), other.context);
        fieldSetFlags()[0] = true;
      }
      this.contextBuilder = null;
      if (isValidValue(fields()[1], other.scope)) {
        this.scope = data().deepCopy(fields()[1].schema(), other.scope);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.requestUuid)) {
        this.requestUuid = data().deepCopy(fields()[2].schema(), other.requestUuid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.includeObjectData)) {
        this.includeObjectData = data().deepCopy(fields()[3].schema(), other.includeObjectData);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.format)) {
        this.format = data().deepCopy(fields()[4].schema(), other.format);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'context' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.Object.ContextInfo getContext() {
      return context;
    }


    /**
      * Sets the value of the 'context' field.
      * @param value The value of 'context'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder setContext(Energistics.Etp.v12.Datatypes.Object.ContextInfo value) {
      validate(fields()[0], value);
      this.contextBuilder = null;
      this.context = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'context' field has been set.
      * @return True if the 'context' field has been set, false otherwise.
      */
    public boolean hasContext() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'context' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Energistics.Etp.v12.Datatypes.Object.ContextInfo.Builder getContextBuilder() {
      if (contextBuilder == null) {
        if (hasContext()) {
          setContextBuilder(Energistics.Etp.v12.Datatypes.Object.ContextInfo.newBuilder(context));
        } else {
          setContextBuilder(Energistics.Etp.v12.Datatypes.Object.ContextInfo.newBuilder());
        }
      }
      return contextBuilder;
    }

    /**
     * Sets the Builder instance for the 'context' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder setContextBuilder(Energistics.Etp.v12.Datatypes.Object.ContextInfo.Builder value) {
      clearContext();
      contextBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'context' field has an active Builder instance
     * @return True if the 'context' field has an active Builder instance
     */
    public boolean hasContextBuilder() {
      return contextBuilder != null;
    }

    /**
      * Clears the value of the 'context' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder clearContext() {
      context = null;
      contextBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'scope' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.Object.ContextScopeKind getScope() {
      return scope;
    }


    /**
      * Sets the value of the 'scope' field.
      * @param value The value of 'scope'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder setScope(Energistics.Etp.v12.Datatypes.Object.ContextScopeKind value) {
      validate(fields()[1], value);
      this.scope = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'scope' field has been set.
      * @return True if the 'scope' field has been set, false otherwise.
      */
    public boolean hasScope() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'scope' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder clearScope() {
      scope = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestUuid' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.Uuid getRequestUuid() {
      return requestUuid;
    }


    /**
      * Sets the value of the 'requestUuid' field.
      * @param value The value of 'requestUuid'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder setRequestUuid(Energistics.Etp.v12.Datatypes.Uuid value) {
      validate(fields()[2], value);
      this.requestUuid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'requestUuid' field has been set.
      * @return True if the 'requestUuid' field has been set, false otherwise.
      */
    public boolean hasRequestUuid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'requestUuid' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder clearRequestUuid() {
      requestUuid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'includeObjectData' field.
      * @return The value.
      */
    public boolean getIncludeObjectData() {
      return includeObjectData;
    }


    /**
      * Sets the value of the 'includeObjectData' field.
      * @param value The value of 'includeObjectData'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder setIncludeObjectData(boolean value) {
      validate(fields()[3], value);
      this.includeObjectData = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'includeObjectData' field has been set.
      * @return True if the 'includeObjectData' field has been set, false otherwise.
      */
    public boolean hasIncludeObjectData() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'includeObjectData' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder clearIncludeObjectData() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'format' field.
      * @return The value.
      */
    public java.lang.CharSequence getFormat() {
      return format;
    }


    /**
      * Sets the value of the 'format' field.
      * @param value The value of 'format'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder setFormat(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.format = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'format' field has been set.
      * @return True if the 'format' field has been set, false otherwise.
      */
    public boolean hasFormat() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'format' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SubscriptionInfo.Builder clearFormat() {
      format = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SubscriptionInfo build() {
      try {
        SubscriptionInfo record = new SubscriptionInfo();
        if (contextBuilder != null) {
          try {
            record.context = this.contextBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("context"));
            throw e;
          }
        } else {
          record.context = fieldSetFlags()[0] ? this.context : (Energistics.Etp.v12.Datatypes.Object.ContextInfo) defaultValue(fields()[0]);
        }
        record.scope = fieldSetFlags()[1] ? this.scope : (Energistics.Etp.v12.Datatypes.Object.ContextScopeKind) defaultValue(fields()[1]);
        record.requestUuid = fieldSetFlags()[2] ? this.requestUuid : (Energistics.Etp.v12.Datatypes.Uuid) defaultValue(fields()[2]);
        record.includeObjectData = fieldSetFlags()[3] ? this.includeObjectData : (java.lang.Boolean) defaultValue(fields()[3]);
        record.format = fieldSetFlags()[4] ? this.format : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SubscriptionInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<SubscriptionInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SubscriptionInfo>
    READER$ = (org.apache.avro.io.DatumReader<SubscriptionInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.context.customEncode(out);

    out.writeEnum(this.scope.ordinal());

    out.writeFixed(this.requestUuid.bytes(), 0, 16);

    out.writeBoolean(this.includeObjectData);

    out.writeString(this.format);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.context == null) {
        this.context = new Energistics.Etp.v12.Datatypes.Object.ContextInfo();
      }
      this.context.customDecode(in);

      this.scope = Energistics.Etp.v12.Datatypes.Object.ContextScopeKind.values()[in.readEnum()];

      if (this.requestUuid == null) {
        this.requestUuid = new Energistics.Etp.v12.Datatypes.Uuid();
      }
      in.readFixed(this.requestUuid.bytes(), 0, 16);

      this.includeObjectData = in.readBoolean();

      this.format = in.readString(this.format instanceof Utf8 ? (Utf8)this.format : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.context == null) {
            this.context = new Energistics.Etp.v12.Datatypes.Object.ContextInfo();
          }
          this.context.customDecode(in);
          break;

        case 1:
          this.scope = Energistics.Etp.v12.Datatypes.Object.ContextScopeKind.values()[in.readEnum()];
          break;

        case 2:
          if (this.requestUuid == null) {
            this.requestUuid = new Energistics.Etp.v12.Datatypes.Uuid();
          }
          in.readFixed(this.requestUuid.bytes(), 0, 16);
          break;

        case 3:
          this.includeObjectData = in.readBoolean();
          break;

        case 4:
          this.format = in.readString(this.format instanceof Utf8 ? (Utf8)this.format : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










