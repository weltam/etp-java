/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Datatypes.Object;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Resource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5067498006695222924L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Resource\",\"namespace\":\"Energistics.Etp.v12.Datatypes.Object\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"alternateUris\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"sourceCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"targetCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"lastChanged\",\"type\":\"long\"},{\"name\":\"storeLastWrite\",\"type\":\"long\"},{\"name\":\"storeCreated\",\"type\":\"long\"},{\"name\":\"activeStatus\",\"type\":{\"type\":\"enum\",\"name\":\"ActiveStatusKind\",\"symbols\":[\"Active\",\"Inactive\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind\",\"depends\":[]}},{\"name\":\"customData\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"DataValue\",\"namespace\":\"Energistics.Etp.v12.Datatypes\",\"fields\":[{\"name\":\"item\",\"type\":[\"null\",\"boolean\",\"int\",\"long\",\"float\",\"double\",\"string\",{\"type\":\"record\",\"name\":\"ArrayOfBoolean\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"boolean\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfBoolean\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfNullableBoolean\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":[\"null\",\"boolean\"]}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfNullableBoolean\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfInt\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfInt\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfNullableInt\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":[\"null\",\"int\"]}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfNullableInt\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfLong\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"long\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfLong\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfNullableLong\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":[\"null\",\"long\"]}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfNullableLong\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfFloat\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"float\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfFloat\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfDouble\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfDouble\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfString\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfString\",\"depends\":[]},{\"type\":\"record\",\"name\":\"ArrayOfBytes\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ArrayOfBytes\",\"depends\":[]},\"bytes\",{\"type\":\"record\",\"name\":\"AnySparseArray\",\"fields\":[{\"name\":\"slices\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AnySubarray\",\"fields\":[{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"slice\",\"type\":{\"type\":\"record\",\"name\":\"AnyArray\",\"fields\":[{\"name\":\"item\",\"type\":[\"ArrayOfBoolean\",\"ArrayOfInt\",\"ArrayOfLong\",\"ArrayOfFloat\",\"ArrayOfDouble\",\"ArrayOfString\",\"bytes\"]}],\"fullName\":\"Energistics.Etp.v12.Datatypes.AnyArray\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ArrayOfBoolean\",\"Energistics.Etp.v12.Datatypes.ArrayOfInt\",\"Energistics.Etp.v12.Datatypes.ArrayOfLong\",\"Energistics.Etp.v12.Datatypes.ArrayOfFloat\",\"Energistics.Etp.v12.Datatypes.ArrayOfDouble\",\"Energistics.Etp.v12.Datatypes.ArrayOfString\"]}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.AnySubarray\",\"depends\":[\"Energistics.Etp.v12.Datatypes.AnyArray\"]}}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.AnySparseArray\",\"depends\":[\"Energistics.Etp.v12.Datatypes.AnySubarray\"]}]}],\"fullName\":\"Energistics.Etp.v12.Datatypes.DataValue\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ArrayOfBoolean\",\"Energistics.Etp.v12.Datatypes.ArrayOfNullableBoolean\",\"Energistics.Etp.v12.Datatypes.ArrayOfInt\",\"Energistics.Etp.v12.Datatypes.ArrayOfNullableInt\",\"Energistics.Etp.v12.Datatypes.ArrayOfLong\",\"Energistics.Etp.v12.Datatypes.ArrayOfNullableLong\",\"Energistics.Etp.v12.Datatypes.ArrayOfFloat\",\"Energistics.Etp.v12.Datatypes.ArrayOfDouble\",\"Energistics.Etp.v12.Datatypes.ArrayOfString\",\"Energistics.Etp.v12.Datatypes.ArrayOfBytes\",\"Energistics.Etp.v12.Datatypes.AnySparseArray\"]}},\"default\":{}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.Resource\",\"depends\":[\"Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind\",\"Energistics.Etp.v12.Datatypes.DataValue\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Resource> ENCODER =
      new BinaryMessageEncoder<Resource>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Resource> DECODER =
      new BinaryMessageDecoder<Resource>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Resource> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Resource> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Resource> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Resource>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Resource to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Resource from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Resource instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Resource fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence uri;
   private java.util.List<java.lang.CharSequence> alternateUris;
   private java.lang.CharSequence name;
   private java.lang.Integer sourceCount;
   private java.lang.Integer targetCount;
   private long lastChanged;
   private long storeLastWrite;
   private long storeCreated;
   private Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind activeStatus;
   private java.util.Map<java.lang.CharSequence,Energistics.Etp.v12.Datatypes.DataValue> customData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Resource() {}

  /**
   * All-args constructor.
   * @param uri The new value for uri
   * @param alternateUris The new value for alternateUris
   * @param name The new value for name
   * @param sourceCount The new value for sourceCount
   * @param targetCount The new value for targetCount
   * @param lastChanged The new value for lastChanged
   * @param storeLastWrite The new value for storeLastWrite
   * @param storeCreated The new value for storeCreated
   * @param activeStatus The new value for activeStatus
   * @param customData The new value for customData
   */
  public Resource(java.lang.CharSequence uri, java.util.List<java.lang.CharSequence> alternateUris, java.lang.CharSequence name, java.lang.Integer sourceCount, java.lang.Integer targetCount, java.lang.Long lastChanged, java.lang.Long storeLastWrite, java.lang.Long storeCreated, Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind activeStatus, java.util.Map<java.lang.CharSequence,Energistics.Etp.v12.Datatypes.DataValue> customData) {
    this.uri = uri;
    this.alternateUris = alternateUris;
    this.name = name;
    this.sourceCount = sourceCount;
    this.targetCount = targetCount;
    this.lastChanged = lastChanged;
    this.storeLastWrite = storeLastWrite;
    this.storeCreated = storeCreated;
    this.activeStatus = activeStatus;
    this.customData = customData;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return alternateUris;
    case 2: return name;
    case 3: return sourceCount;
    case 4: return targetCount;
    case 5: return lastChanged;
    case 6: return storeLastWrite;
    case 7: return storeCreated;
    case 8: return activeStatus;
    case 9: return customData;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: alternateUris = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: name = (java.lang.CharSequence)value$; break;
    case 3: sourceCount = (java.lang.Integer)value$; break;
    case 4: targetCount = (java.lang.Integer)value$; break;
    case 5: lastChanged = (java.lang.Long)value$; break;
    case 6: storeLastWrite = (java.lang.Long)value$; break;
    case 7: storeCreated = (java.lang.Long)value$; break;
    case 8: activeStatus = (Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind)value$; break;
    case 9: customData = (java.util.Map<java.lang.CharSequence,Energistics.Etp.v12.Datatypes.DataValue>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return The value of the 'uri' field.
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'alternateUris' field.
   * @return The value of the 'alternateUris' field.
   */
  public java.util.List<java.lang.CharSequence> getAlternateUris() {
    return alternateUris;
  }


  /**
   * Sets the value of the 'alternateUris' field.
   * @param value the value to set.
   */
  public void setAlternateUris(java.util.List<java.lang.CharSequence> value) {
    this.alternateUris = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'sourceCount' field.
   * @return The value of the 'sourceCount' field.
   */
  public java.lang.Integer getSourceCount() {
    return sourceCount;
  }


  /**
   * Sets the value of the 'sourceCount' field.
   * @param value the value to set.
   */
  public void setSourceCount(java.lang.Integer value) {
    this.sourceCount = value;
  }

  /**
   * Gets the value of the 'targetCount' field.
   * @return The value of the 'targetCount' field.
   */
  public java.lang.Integer getTargetCount() {
    return targetCount;
  }


  /**
   * Sets the value of the 'targetCount' field.
   * @param value the value to set.
   */
  public void setTargetCount(java.lang.Integer value) {
    this.targetCount = value;
  }

  /**
   * Gets the value of the 'lastChanged' field.
   * @return The value of the 'lastChanged' field.
   */
  public long getLastChanged() {
    return lastChanged;
  }


  /**
   * Sets the value of the 'lastChanged' field.
   * @param value the value to set.
   */
  public void setLastChanged(long value) {
    this.lastChanged = value;
  }

  /**
   * Gets the value of the 'storeLastWrite' field.
   * @return The value of the 'storeLastWrite' field.
   */
  public long getStoreLastWrite() {
    return storeLastWrite;
  }


  /**
   * Sets the value of the 'storeLastWrite' field.
   * @param value the value to set.
   */
  public void setStoreLastWrite(long value) {
    this.storeLastWrite = value;
  }

  /**
   * Gets the value of the 'storeCreated' field.
   * @return The value of the 'storeCreated' field.
   */
  public long getStoreCreated() {
    return storeCreated;
  }


  /**
   * Sets the value of the 'storeCreated' field.
   * @param value the value to set.
   */
  public void setStoreCreated(long value) {
    this.storeCreated = value;
  }

  /**
   * Gets the value of the 'activeStatus' field.
   * @return The value of the 'activeStatus' field.
   */
  public Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind getActiveStatus() {
    return activeStatus;
  }


  /**
   * Sets the value of the 'activeStatus' field.
   * @param value the value to set.
   */
  public void setActiveStatus(Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind value) {
    this.activeStatus = value;
  }

  /**
   * Gets the value of the 'customData' field.
   * @return The value of the 'customData' field.
   */
  public java.util.Map<java.lang.CharSequence,Energistics.Etp.v12.Datatypes.DataValue> getCustomData() {
    return customData;
  }


  /**
   * Sets the value of the 'customData' field.
   * @param value the value to set.
   */
  public void setCustomData(java.util.Map<java.lang.CharSequence,Energistics.Etp.v12.Datatypes.DataValue> value) {
    this.customData = value;
  }

  /**
   * Creates a new Resource RecordBuilder.
   * @return A new Resource RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.Resource.Builder newBuilder() {
    return new Energistics.Etp.v12.Datatypes.Object.Resource.Builder();
  }

  /**
   * Creates a new Resource RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Resource RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.Resource.Builder newBuilder(Energistics.Etp.v12.Datatypes.Object.Resource.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.Object.Resource.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.Object.Resource.Builder(other);
    }
  }

  /**
   * Creates a new Resource RecordBuilder by copying an existing Resource instance.
   * @param other The existing instance to copy.
   * @return A new Resource RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.Resource.Builder newBuilder(Energistics.Etp.v12.Datatypes.Object.Resource other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.Object.Resource.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.Object.Resource.Builder(other);
    }
  }

  /**
   * RecordBuilder for Resource instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Resource>
    implements org.apache.avro.data.RecordBuilder<Resource> {

    private java.lang.CharSequence uri;
    private java.util.List<java.lang.CharSequence> alternateUris;
    private java.lang.CharSequence name;
    private java.lang.Integer sourceCount;
    private java.lang.Integer targetCount;
    private long lastChanged;
    private long storeLastWrite;
    private long storeCreated;
    private Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind activeStatus;
    private java.util.Map<java.lang.CharSequence,Energistics.Etp.v12.Datatypes.DataValue> customData;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.Object.Resource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.alternateUris)) {
        this.alternateUris = data().deepCopy(fields()[1].schema(), other.alternateUris);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sourceCount)) {
        this.sourceCount = data().deepCopy(fields()[3].schema(), other.sourceCount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.targetCount)) {
        this.targetCount = data().deepCopy(fields()[4].schema(), other.targetCount);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lastChanged)) {
        this.lastChanged = data().deepCopy(fields()[5].schema(), other.lastChanged);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.storeLastWrite)) {
        this.storeLastWrite = data().deepCopy(fields()[6].schema(), other.storeLastWrite);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.storeCreated)) {
        this.storeCreated = data().deepCopy(fields()[7].schema(), other.storeCreated);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.activeStatus)) {
        this.activeStatus = data().deepCopy(fields()[8].schema(), other.activeStatus);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.customData)) {
        this.customData = data().deepCopy(fields()[9].schema(), other.customData);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Resource instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.Object.Resource other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alternateUris)) {
        this.alternateUris = data().deepCopy(fields()[1].schema(), other.alternateUris);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sourceCount)) {
        this.sourceCount = data().deepCopy(fields()[3].schema(), other.sourceCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.targetCount)) {
        this.targetCount = data().deepCopy(fields()[4].schema(), other.targetCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastChanged)) {
        this.lastChanged = data().deepCopy(fields()[5].schema(), other.lastChanged);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.storeLastWrite)) {
        this.storeLastWrite = data().deepCopy(fields()[6].schema(), other.storeLastWrite);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.storeCreated)) {
        this.storeCreated = data().deepCopy(fields()[7].schema(), other.storeCreated);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.activeStatus)) {
        this.activeStatus = data().deepCopy(fields()[8].schema(), other.activeStatus);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.customData)) {
        this.customData = data().deepCopy(fields()[9].schema(), other.customData);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'uri' field.
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateUris' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAlternateUris() {
      return alternateUris;
    }


    /**
      * Sets the value of the 'alternateUris' field.
      * @param value The value of 'alternateUris'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setAlternateUris(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.alternateUris = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateUris' field has been set.
      * @return True if the 'alternateUris' field has been set, false otherwise.
      */
    public boolean hasAlternateUris() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'alternateUris' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearAlternateUris() {
      alternateUris = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceCount' field.
      * @return The value.
      */
    public java.lang.Integer getSourceCount() {
      return sourceCount;
    }


    /**
      * Sets the value of the 'sourceCount' field.
      * @param value The value of 'sourceCount'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setSourceCount(java.lang.Integer value) {
      validate(fields()[3], value);
      this.sourceCount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceCount' field has been set.
      * @return True if the 'sourceCount' field has been set, false otherwise.
      */
    public boolean hasSourceCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sourceCount' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearSourceCount() {
      sourceCount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetCount' field.
      * @return The value.
      */
    public java.lang.Integer getTargetCount() {
      return targetCount;
    }


    /**
      * Sets the value of the 'targetCount' field.
      * @param value The value of 'targetCount'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setTargetCount(java.lang.Integer value) {
      validate(fields()[4], value);
      this.targetCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'targetCount' field has been set.
      * @return True if the 'targetCount' field has been set, false otherwise.
      */
    public boolean hasTargetCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'targetCount' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearTargetCount() {
      targetCount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastChanged' field.
      * @return The value.
      */
    public long getLastChanged() {
      return lastChanged;
    }


    /**
      * Sets the value of the 'lastChanged' field.
      * @param value The value of 'lastChanged'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setLastChanged(long value) {
      validate(fields()[5], value);
      this.lastChanged = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lastChanged' field has been set.
      * @return True if the 'lastChanged' field has been set, false otherwise.
      */
    public boolean hasLastChanged() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lastChanged' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearLastChanged() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'storeLastWrite' field.
      * @return The value.
      */
    public long getStoreLastWrite() {
      return storeLastWrite;
    }


    /**
      * Sets the value of the 'storeLastWrite' field.
      * @param value The value of 'storeLastWrite'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setStoreLastWrite(long value) {
      validate(fields()[6], value);
      this.storeLastWrite = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'storeLastWrite' field has been set.
      * @return True if the 'storeLastWrite' field has been set, false otherwise.
      */
    public boolean hasStoreLastWrite() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'storeLastWrite' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearStoreLastWrite() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'storeCreated' field.
      * @return The value.
      */
    public long getStoreCreated() {
      return storeCreated;
    }


    /**
      * Sets the value of the 'storeCreated' field.
      * @param value The value of 'storeCreated'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setStoreCreated(long value) {
      validate(fields()[7], value);
      this.storeCreated = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'storeCreated' field has been set.
      * @return True if the 'storeCreated' field has been set, false otherwise.
      */
    public boolean hasStoreCreated() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'storeCreated' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearStoreCreated() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'activeStatus' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind getActiveStatus() {
      return activeStatus;
    }


    /**
      * Sets the value of the 'activeStatus' field.
      * @param value The value of 'activeStatus'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setActiveStatus(Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind value) {
      validate(fields()[8], value);
      this.activeStatus = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'activeStatus' field has been set.
      * @return True if the 'activeStatus' field has been set, false otherwise.
      */
    public boolean hasActiveStatus() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'activeStatus' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearActiveStatus() {
      activeStatus = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'customData' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,Energistics.Etp.v12.Datatypes.DataValue> getCustomData() {
      return customData;
    }


    /**
      * Sets the value of the 'customData' field.
      * @param value The value of 'customData'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder setCustomData(java.util.Map<java.lang.CharSequence,Energistics.Etp.v12.Datatypes.DataValue> value) {
      validate(fields()[9], value);
      this.customData = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'customData' field has been set.
      * @return True if the 'customData' field has been set, false otherwise.
      */
    public boolean hasCustomData() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'customData' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.Resource.Builder clearCustomData() {
      customData = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Resource build() {
      try {
        Resource record = new Resource();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.alternateUris = fieldSetFlags()[1] ? this.alternateUris : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.sourceCount = fieldSetFlags()[3] ? this.sourceCount : (java.lang.Integer) defaultValue(fields()[3]);
        record.targetCount = fieldSetFlags()[4] ? this.targetCount : (java.lang.Integer) defaultValue(fields()[4]);
        record.lastChanged = fieldSetFlags()[5] ? this.lastChanged : (java.lang.Long) defaultValue(fields()[5]);
        record.storeLastWrite = fieldSetFlags()[6] ? this.storeLastWrite : (java.lang.Long) defaultValue(fields()[6]);
        record.storeCreated = fieldSetFlags()[7] ? this.storeCreated : (java.lang.Long) defaultValue(fields()[7]);
        record.activeStatus = fieldSetFlags()[8] ? this.activeStatus : (Energistics.Etp.v12.Datatypes.Object.ActiveStatusKind) defaultValue(fields()[8]);
        record.customData = fieldSetFlags()[9] ? this.customData : (java.util.Map<java.lang.CharSequence,Energistics.Etp.v12.Datatypes.DataValue>) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Resource>
    WRITER$ = (org.apache.avro.io.DatumWriter<Resource>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Resource>
    READER$ = (org.apache.avro.io.DatumReader<Resource>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










