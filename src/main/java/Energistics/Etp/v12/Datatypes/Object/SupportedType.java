/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Datatypes.Object;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SupportedType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6386947827254396121L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SupportedType\",\"namespace\":\"Energistics.Etp.v12.Datatypes.Object\",\"fields\":[{\"name\":\"dataObjectType\",\"type\":\"string\"},{\"name\":\"objectCount\",\"type\":[\"null\",\"int\"]},{\"name\":\"relationshipKind\",\"type\":{\"type\":\"enum\",\"name\":\"RelationshipKind\",\"symbols\":[\"Primary\",\"Secondary\",\"Both\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.RelationshipKind\",\"depends\":[]}}],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.SupportedType\",\"depends\":[\"Energistics.Etp.v12.Datatypes.Object.RelationshipKind\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SupportedType> ENCODER =
      new BinaryMessageEncoder<SupportedType>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SupportedType> DECODER =
      new BinaryMessageDecoder<SupportedType>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SupportedType> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SupportedType> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SupportedType> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SupportedType>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SupportedType to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SupportedType from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SupportedType instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SupportedType fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence dataObjectType;
   private java.lang.Integer objectCount;
   private Energistics.Etp.v12.Datatypes.Object.RelationshipKind relationshipKind;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SupportedType() {}

  /**
   * All-args constructor.
   * @param dataObjectType The new value for dataObjectType
   * @param objectCount The new value for objectCount
   * @param relationshipKind The new value for relationshipKind
   */
  public SupportedType(java.lang.CharSequence dataObjectType, java.lang.Integer objectCount, Energistics.Etp.v12.Datatypes.Object.RelationshipKind relationshipKind) {
    this.dataObjectType = dataObjectType;
    this.objectCount = objectCount;
    this.relationshipKind = relationshipKind;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dataObjectType;
    case 1: return objectCount;
    case 2: return relationshipKind;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dataObjectType = (java.lang.CharSequence)value$; break;
    case 1: objectCount = (java.lang.Integer)value$; break;
    case 2: relationshipKind = (Energistics.Etp.v12.Datatypes.Object.RelationshipKind)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'dataObjectType' field.
   * @return The value of the 'dataObjectType' field.
   */
  public java.lang.CharSequence getDataObjectType() {
    return dataObjectType;
  }


  /**
   * Sets the value of the 'dataObjectType' field.
   * @param value the value to set.
   */
  public void setDataObjectType(java.lang.CharSequence value) {
    this.dataObjectType = value;
  }

  /**
   * Gets the value of the 'objectCount' field.
   * @return The value of the 'objectCount' field.
   */
  public java.lang.Integer getObjectCount() {
    return objectCount;
  }


  /**
   * Sets the value of the 'objectCount' field.
   * @param value the value to set.
   */
  public void setObjectCount(java.lang.Integer value) {
    this.objectCount = value;
  }

  /**
   * Gets the value of the 'relationshipKind' field.
   * @return The value of the 'relationshipKind' field.
   */
  public Energistics.Etp.v12.Datatypes.Object.RelationshipKind getRelationshipKind() {
    return relationshipKind;
  }


  /**
   * Sets the value of the 'relationshipKind' field.
   * @param value the value to set.
   */
  public void setRelationshipKind(Energistics.Etp.v12.Datatypes.Object.RelationshipKind value) {
    this.relationshipKind = value;
  }

  /**
   * Creates a new SupportedType RecordBuilder.
   * @return A new SupportedType RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder newBuilder() {
    return new Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder();
  }

  /**
   * Creates a new SupportedType RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SupportedType RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder newBuilder(Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder(other);
    }
  }

  /**
   * Creates a new SupportedType RecordBuilder by copying an existing SupportedType instance.
   * @param other The existing instance to copy.
   * @return A new SupportedType RecordBuilder
   */
  public static Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder newBuilder(Energistics.Etp.v12.Datatypes.Object.SupportedType other) {
    if (other == null) {
      return new Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder();
    } else {
      return new Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder(other);
    }
  }

  /**
   * RecordBuilder for SupportedType instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SupportedType>
    implements org.apache.avro.data.RecordBuilder<SupportedType> {

    private java.lang.CharSequence dataObjectType;
    private java.lang.Integer objectCount;
    private Energistics.Etp.v12.Datatypes.Object.RelationshipKind relationshipKind;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dataObjectType)) {
        this.dataObjectType = data().deepCopy(fields()[0].schema(), other.dataObjectType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.objectCount)) {
        this.objectCount = data().deepCopy(fields()[1].schema(), other.objectCount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.relationshipKind)) {
        this.relationshipKind = data().deepCopy(fields()[2].schema(), other.relationshipKind);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing SupportedType instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Datatypes.Object.SupportedType other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.dataObjectType)) {
        this.dataObjectType = data().deepCopy(fields()[0].schema(), other.dataObjectType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.objectCount)) {
        this.objectCount = data().deepCopy(fields()[1].schema(), other.objectCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.relationshipKind)) {
        this.relationshipKind = data().deepCopy(fields()[2].schema(), other.relationshipKind);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'dataObjectType' field.
      * @return The value.
      */
    public java.lang.CharSequence getDataObjectType() {
      return dataObjectType;
    }


    /**
      * Sets the value of the 'dataObjectType' field.
      * @param value The value of 'dataObjectType'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder setDataObjectType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.dataObjectType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dataObjectType' field has been set.
      * @return True if the 'dataObjectType' field has been set, false otherwise.
      */
    public boolean hasDataObjectType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dataObjectType' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder clearDataObjectType() {
      dataObjectType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'objectCount' field.
      * @return The value.
      */
    public java.lang.Integer getObjectCount() {
      return objectCount;
    }


    /**
      * Sets the value of the 'objectCount' field.
      * @param value The value of 'objectCount'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder setObjectCount(java.lang.Integer value) {
      validate(fields()[1], value);
      this.objectCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'objectCount' field has been set.
      * @return True if the 'objectCount' field has been set, false otherwise.
      */
    public boolean hasObjectCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'objectCount' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder clearObjectCount() {
      objectCount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'relationshipKind' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.Object.RelationshipKind getRelationshipKind() {
      return relationshipKind;
    }


    /**
      * Sets the value of the 'relationshipKind' field.
      * @param value The value of 'relationshipKind'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder setRelationshipKind(Energistics.Etp.v12.Datatypes.Object.RelationshipKind value) {
      validate(fields()[2], value);
      this.relationshipKind = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'relationshipKind' field has been set.
      * @return True if the 'relationshipKind' field has been set, false otherwise.
      */
    public boolean hasRelationshipKind() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'relationshipKind' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Datatypes.Object.SupportedType.Builder clearRelationshipKind() {
      relationshipKind = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SupportedType build() {
      try {
        SupportedType record = new SupportedType();
        record.dataObjectType = fieldSetFlags()[0] ? this.dataObjectType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.objectCount = fieldSetFlags()[1] ? this.objectCount : (java.lang.Integer) defaultValue(fields()[1]);
        record.relationshipKind = fieldSetFlags()[2] ? this.relationshipKind : (Energistics.Etp.v12.Datatypes.Object.RelationshipKind) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SupportedType>
    WRITER$ = (org.apache.avro.io.DatumWriter<SupportedType>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SupportedType>
    READER$ = (org.apache.avro.io.DatumReader<SupportedType>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.dataObjectType);

    if (this.objectCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.objectCount);
    }

    out.writeEnum(this.relationshipKind.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.dataObjectType = in.readString(this.dataObjectType instanceof Utf8 ? (Utf8)this.dataObjectType : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.objectCount = null;
      } else {
        this.objectCount = in.readInt();
      }

      this.relationshipKind = Energistics.Etp.v12.Datatypes.Object.RelationshipKind.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.dataObjectType = in.readString(this.dataObjectType instanceof Utf8 ? (Utf8)this.dataObjectType : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.objectCount = null;
          } else {
            this.objectCount = in.readInt();
          }
          break;

        case 2:
          this.relationshipKind = Energistics.Etp.v12.Datatypes.Object.RelationshipKind.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










