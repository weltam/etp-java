/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Protocol.Transaction;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StartTransactionResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1225491288561166616L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StartTransactionResponse\",\"namespace\":\"Energistics.Etp.v12.Protocol.Transaction\",\"fields\":[{\"name\":\"transactionUuid\",\"type\":{\"type\":\"fixed\",\"name\":\"Uuid\",\"namespace\":\"Energistics.Etp.v12.Datatypes\",\"size\":16,\"fullName\":\"Energistics.Etp.v12.Datatypes.Uuid\",\"depends\":[]}},{\"name\":\"successful\",\"type\":\"boolean\",\"default\":true},{\"name\":\"failureReason\",\"type\":\"string\",\"default\":\"\"}],\"protocol\":\"18\",\"messageType\":\"2\",\"senderRole\":\"store\",\"protocolRoles\":\"store,customer\",\"multipartFlag\":false,\"fullName\":\"Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse\",\"depends\":[\"Energistics.Etp.v12.Datatypes.Uuid\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StartTransactionResponse> ENCODER =
      new BinaryMessageEncoder<StartTransactionResponse>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StartTransactionResponse> DECODER =
      new BinaryMessageDecoder<StartTransactionResponse>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StartTransactionResponse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StartTransactionResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StartTransactionResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StartTransactionResponse>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StartTransactionResponse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StartTransactionResponse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StartTransactionResponse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StartTransactionResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private Energistics.Etp.v12.Datatypes.Uuid transactionUuid;
   private boolean successful;
   private java.lang.CharSequence failureReason;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StartTransactionResponse() {}

  /**
   * All-args constructor.
   * @param transactionUuid The new value for transactionUuid
   * @param successful The new value for successful
   * @param failureReason The new value for failureReason
   */
  public StartTransactionResponse(Energistics.Etp.v12.Datatypes.Uuid transactionUuid, java.lang.Boolean successful, java.lang.CharSequence failureReason) {
    this.transactionUuid = transactionUuid;
    this.successful = successful;
    this.failureReason = failureReason;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionUuid;
    case 1: return successful;
    case 2: return failureReason;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionUuid = (Energistics.Etp.v12.Datatypes.Uuid)value$; break;
    case 1: successful = (java.lang.Boolean)value$; break;
    case 2: failureReason = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionUuid' field.
   * @return The value of the 'transactionUuid' field.
   */
  public Energistics.Etp.v12.Datatypes.Uuid getTransactionUuid() {
    return transactionUuid;
  }


  /**
   * Sets the value of the 'transactionUuid' field.
   * @param value the value to set.
   */
  public void setTransactionUuid(Energistics.Etp.v12.Datatypes.Uuid value) {
    this.transactionUuid = value;
  }

  /**
   * Gets the value of the 'successful' field.
   * @return The value of the 'successful' field.
   */
  public boolean getSuccessful() {
    return successful;
  }


  /**
   * Sets the value of the 'successful' field.
   * @param value the value to set.
   */
  public void setSuccessful(boolean value) {
    this.successful = value;
  }

  /**
   * Gets the value of the 'failureReason' field.
   * @return The value of the 'failureReason' field.
   */
  public java.lang.CharSequence getFailureReason() {
    return failureReason;
  }


  /**
   * Sets the value of the 'failureReason' field.
   * @param value the value to set.
   */
  public void setFailureReason(java.lang.CharSequence value) {
    this.failureReason = value;
  }

  /**
   * Creates a new StartTransactionResponse RecordBuilder.
   * @return A new StartTransactionResponse RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder newBuilder() {
    return new Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder();
  }

  /**
   * Creates a new StartTransactionResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StartTransactionResponse RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder newBuilder(Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder();
    } else {
      return new Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder(other);
    }
  }

  /**
   * Creates a new StartTransactionResponse RecordBuilder by copying an existing StartTransactionResponse instance.
   * @param other The existing instance to copy.
   * @return A new StartTransactionResponse RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder newBuilder(Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse other) {
    if (other == null) {
      return new Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder();
    } else {
      return new Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder(other);
    }
  }

  /**
   * RecordBuilder for StartTransactionResponse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StartTransactionResponse>
    implements org.apache.avro.data.RecordBuilder<StartTransactionResponse> {

    private Energistics.Etp.v12.Datatypes.Uuid transactionUuid;
    private boolean successful;
    private java.lang.CharSequence failureReason;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionUuid)) {
        this.transactionUuid = data().deepCopy(fields()[0].schema(), other.transactionUuid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.successful)) {
        this.successful = data().deepCopy(fields()[1].schema(), other.successful);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.failureReason)) {
        this.failureReason = data().deepCopy(fields()[2].schema(), other.failureReason);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing StartTransactionResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.transactionUuid)) {
        this.transactionUuid = data().deepCopy(fields()[0].schema(), other.transactionUuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.successful)) {
        this.successful = data().deepCopy(fields()[1].schema(), other.successful);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.failureReason)) {
        this.failureReason = data().deepCopy(fields()[2].schema(), other.failureReason);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'transactionUuid' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.Uuid getTransactionUuid() {
      return transactionUuid;
    }


    /**
      * Sets the value of the 'transactionUuid' field.
      * @param value The value of 'transactionUuid'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder setTransactionUuid(Energistics.Etp.v12.Datatypes.Uuid value) {
      validate(fields()[0], value);
      this.transactionUuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionUuid' field has been set.
      * @return True if the 'transactionUuid' field has been set, false otherwise.
      */
    public boolean hasTransactionUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionUuid' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder clearTransactionUuid() {
      transactionUuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'successful' field.
      * @return The value.
      */
    public boolean getSuccessful() {
      return successful;
    }


    /**
      * Sets the value of the 'successful' field.
      * @param value The value of 'successful'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder setSuccessful(boolean value) {
      validate(fields()[1], value);
      this.successful = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'successful' field has been set.
      * @return True if the 'successful' field has been set, false otherwise.
      */
    public boolean hasSuccessful() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'successful' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder clearSuccessful() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'failureReason' field.
      * @return The value.
      */
    public java.lang.CharSequence getFailureReason() {
      return failureReason;
    }


    /**
      * Sets the value of the 'failureReason' field.
      * @param value The value of 'failureReason'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder setFailureReason(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.failureReason = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'failureReason' field has been set.
      * @return True if the 'failureReason' field has been set, false otherwise.
      */
    public boolean hasFailureReason() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'failureReason' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.Transaction.StartTransactionResponse.Builder clearFailureReason() {
      failureReason = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StartTransactionResponse build() {
      try {
        StartTransactionResponse record = new StartTransactionResponse();
        record.transactionUuid = fieldSetFlags()[0] ? this.transactionUuid : (Energistics.Etp.v12.Datatypes.Uuid) defaultValue(fields()[0]);
        record.successful = fieldSetFlags()[1] ? this.successful : (java.lang.Boolean) defaultValue(fields()[1]);
        record.failureReason = fieldSetFlags()[2] ? this.failureReason : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StartTransactionResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<StartTransactionResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StartTransactionResponse>
    READER$ = (org.apache.avro.io.DatumReader<StartTransactionResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeFixed(this.transactionUuid.bytes(), 0, 16);

    out.writeBoolean(this.successful);

    out.writeString(this.failureReason);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.transactionUuid == null) {
        this.transactionUuid = new Energistics.Etp.v12.Datatypes.Uuid();
      }
      in.readFixed(this.transactionUuid.bytes(), 0, 16);

      this.successful = in.readBoolean();

      this.failureReason = in.readString(this.failureReason instanceof Utf8 ? (Utf8)this.failureReason : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.transactionUuid == null) {
            this.transactionUuid = new Energistics.Etp.v12.Datatypes.Uuid();
          }
          in.readFixed(this.transactionUuid.bytes(), 0, 16);
          break;

        case 1:
          this.successful = in.readBoolean();
          break;

        case 2:
          this.failureReason = in.readString(this.failureReason instanceof Utf8 ? (Utf8)this.failureReason : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










