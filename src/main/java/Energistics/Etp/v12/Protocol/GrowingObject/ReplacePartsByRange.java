/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Protocol.GrowingObject;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ReplacePartsByRange extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2672383565306633509L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReplacePartsByRange\",\"namespace\":\"Energistics.Etp.v12.Protocol.GrowingObject\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"deleteInterval\",\"type\":{\"type\":\"record\",\"name\":\"IndexInterval\",\"namespace\":\"Energistics.Etp.v12.Datatypes.Object\",\"fields\":[{\"name\":\"startIndex\",\"type\":{\"type\":\"record\",\"name\":\"IndexValue\",\"namespace\":\"Energistics.Etp.v12.Datatypes\",\"fields\":[{\"name\":\"item\",\"type\":[\"null\",\"long\",\"double\",{\"type\":\"record\",\"name\":\"PassIndexedDepth\",\"namespace\":\"Energistics.Etp.v12.Datatypes.ChannelData\",\"fields\":[{\"name\":\"pass\",\"type\":\"long\"},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"PassDirection\",\"symbols\":[\"Up\",\"HoldingSteady\",\"Down\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.PassDirection\",\"depends\":[]}},{\"name\":\"depth\",\"type\":\"double\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.PassIndexedDepth\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ChannelData.PassDirection\"]}]}],\"fullName\":\"Energistics.Etp.v12.Datatypes.IndexValue\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ChannelData.PassIndexedDepth\"]}},{\"name\":\"endIndex\",\"type\":\"Energistics.Etp.v12.Datatypes.IndexValue\"},{\"name\":\"uom\",\"type\":\"string\"},{\"name\":\"depthDatum\",\"type\":\"string\",\"default\":\"\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.IndexInterval\",\"depends\":[\"Energistics.Etp.v12.Datatypes.IndexValue\",\"Energistics.Etp.v12.Datatypes.IndexValue\"]}},{\"name\":\"includeOverlappingIntervals\",\"type\":\"boolean\"},{\"name\":\"format\",\"type\":\"string\",\"default\":\"xml\"},{\"name\":\"parts\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ObjectPart\",\"namespace\":\"Energistics.Etp.v12.Datatypes.Object\",\"fields\":[{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.ObjectPart\",\"depends\":[]}}}],\"protocol\":\"6\",\"messageType\":\"7\",\"senderRole\":\"customer\",\"protocolRoles\":\"store,customer\",\"multipartFlag\":true,\"fullName\":\"Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange\",\"depends\":[\"Energistics.Etp.v12.Datatypes.Object.IndexInterval\",\"Energistics.Etp.v12.Datatypes.Object.ObjectPart\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ReplacePartsByRange> ENCODER =
      new BinaryMessageEncoder<ReplacePartsByRange>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ReplacePartsByRange> DECODER =
      new BinaryMessageDecoder<ReplacePartsByRange>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ReplacePartsByRange> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ReplacePartsByRange> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ReplacePartsByRange> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ReplacePartsByRange>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ReplacePartsByRange to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ReplacePartsByRange from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ReplacePartsByRange instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ReplacePartsByRange fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence uri;
   private Energistics.Etp.v12.Datatypes.Object.IndexInterval deleteInterval;
   private boolean includeOverlappingIntervals;
   private java.lang.CharSequence format;
   private java.util.List<Energistics.Etp.v12.Datatypes.Object.ObjectPart> parts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ReplacePartsByRange() {}

  /**
   * All-args constructor.
   * @param uri The new value for uri
   * @param deleteInterval The new value for deleteInterval
   * @param includeOverlappingIntervals The new value for includeOverlappingIntervals
   * @param format The new value for format
   * @param parts The new value for parts
   */
  public ReplacePartsByRange(java.lang.CharSequence uri, Energistics.Etp.v12.Datatypes.Object.IndexInterval deleteInterval, java.lang.Boolean includeOverlappingIntervals, java.lang.CharSequence format, java.util.List<Energistics.Etp.v12.Datatypes.Object.ObjectPart> parts) {
    this.uri = uri;
    this.deleteInterval = deleteInterval;
    this.includeOverlappingIntervals = includeOverlappingIntervals;
    this.format = format;
    this.parts = parts;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return deleteInterval;
    case 2: return includeOverlappingIntervals;
    case 3: return format;
    case 4: return parts;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: deleteInterval = (Energistics.Etp.v12.Datatypes.Object.IndexInterval)value$; break;
    case 2: includeOverlappingIntervals = (java.lang.Boolean)value$; break;
    case 3: format = (java.lang.CharSequence)value$; break;
    case 4: parts = (java.util.List<Energistics.Etp.v12.Datatypes.Object.ObjectPart>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return The value of the 'uri' field.
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'deleteInterval' field.
   * @return The value of the 'deleteInterval' field.
   */
  public Energistics.Etp.v12.Datatypes.Object.IndexInterval getDeleteInterval() {
    return deleteInterval;
  }


  /**
   * Sets the value of the 'deleteInterval' field.
   * @param value the value to set.
   */
  public void setDeleteInterval(Energistics.Etp.v12.Datatypes.Object.IndexInterval value) {
    this.deleteInterval = value;
  }

  /**
   * Gets the value of the 'includeOverlappingIntervals' field.
   * @return The value of the 'includeOverlappingIntervals' field.
   */
  public boolean getIncludeOverlappingIntervals() {
    return includeOverlappingIntervals;
  }


  /**
   * Sets the value of the 'includeOverlappingIntervals' field.
   * @param value the value to set.
   */
  public void setIncludeOverlappingIntervals(boolean value) {
    this.includeOverlappingIntervals = value;
  }

  /**
   * Gets the value of the 'format' field.
   * @return The value of the 'format' field.
   */
  public java.lang.CharSequence getFormat() {
    return format;
  }


  /**
   * Sets the value of the 'format' field.
   * @param value the value to set.
   */
  public void setFormat(java.lang.CharSequence value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'parts' field.
   * @return The value of the 'parts' field.
   */
  public java.util.List<Energistics.Etp.v12.Datatypes.Object.ObjectPart> getParts() {
    return parts;
  }


  /**
   * Sets the value of the 'parts' field.
   * @param value the value to set.
   */
  public void setParts(java.util.List<Energistics.Etp.v12.Datatypes.Object.ObjectPart> value) {
    this.parts = value;
  }

  /**
   * Creates a new ReplacePartsByRange RecordBuilder.
   * @return A new ReplacePartsByRange RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder newBuilder() {
    return new Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder();
  }

  /**
   * Creates a new ReplacePartsByRange RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReplacePartsByRange RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder newBuilder(Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder();
    } else {
      return new Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder(other);
    }
  }

  /**
   * Creates a new ReplacePartsByRange RecordBuilder by copying an existing ReplacePartsByRange instance.
   * @param other The existing instance to copy.
   * @return A new ReplacePartsByRange RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder newBuilder(Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange other) {
    if (other == null) {
      return new Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder();
    } else {
      return new Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder(other);
    }
  }

  /**
   * RecordBuilder for ReplacePartsByRange instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReplacePartsByRange>
    implements org.apache.avro.data.RecordBuilder<ReplacePartsByRange> {

    private java.lang.CharSequence uri;
    private Energistics.Etp.v12.Datatypes.Object.IndexInterval deleteInterval;
    private Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder deleteIntervalBuilder;
    private boolean includeOverlappingIntervals;
    private java.lang.CharSequence format;
    private java.util.List<Energistics.Etp.v12.Datatypes.Object.ObjectPart> parts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.deleteInterval)) {
        this.deleteInterval = data().deepCopy(fields()[1].schema(), other.deleteInterval);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasDeleteIntervalBuilder()) {
        this.deleteIntervalBuilder = Energistics.Etp.v12.Datatypes.Object.IndexInterval.newBuilder(other.getDeleteIntervalBuilder());
      }
      if (isValidValue(fields()[2], other.includeOverlappingIntervals)) {
        this.includeOverlappingIntervals = data().deepCopy(fields()[2].schema(), other.includeOverlappingIntervals);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.format)) {
        this.format = data().deepCopy(fields()[3].schema(), other.format);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.parts)) {
        this.parts = data().deepCopy(fields()[4].schema(), other.parts);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ReplacePartsByRange instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.deleteInterval)) {
        this.deleteInterval = data().deepCopy(fields()[1].schema(), other.deleteInterval);
        fieldSetFlags()[1] = true;
      }
      this.deleteIntervalBuilder = null;
      if (isValidValue(fields()[2], other.includeOverlappingIntervals)) {
        this.includeOverlappingIntervals = data().deepCopy(fields()[2].schema(), other.includeOverlappingIntervals);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.format)) {
        this.format = data().deepCopy(fields()[3].schema(), other.format);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.parts)) {
        this.parts = data().deepCopy(fields()[4].schema(), other.parts);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'uri' field.
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'deleteInterval' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval getDeleteInterval() {
      return deleteInterval;
    }


    /**
      * Sets the value of the 'deleteInterval' field.
      * @param value The value of 'deleteInterval'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder setDeleteInterval(Energistics.Etp.v12.Datatypes.Object.IndexInterval value) {
      validate(fields()[1], value);
      this.deleteIntervalBuilder = null;
      this.deleteInterval = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'deleteInterval' field has been set.
      * @return True if the 'deleteInterval' field has been set, false otherwise.
      */
    public boolean hasDeleteInterval() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'deleteInterval' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder getDeleteIntervalBuilder() {
      if (deleteIntervalBuilder == null) {
        if (hasDeleteInterval()) {
          setDeleteIntervalBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.newBuilder(deleteInterval));
        } else {
          setDeleteIntervalBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.newBuilder());
        }
      }
      return deleteIntervalBuilder;
    }

    /**
     * Sets the Builder instance for the 'deleteInterval' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder setDeleteIntervalBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder value) {
      clearDeleteInterval();
      deleteIntervalBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'deleteInterval' field has an active Builder instance
     * @return True if the 'deleteInterval' field has an active Builder instance
     */
    public boolean hasDeleteIntervalBuilder() {
      return deleteIntervalBuilder != null;
    }

    /**
      * Clears the value of the 'deleteInterval' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder clearDeleteInterval() {
      deleteInterval = null;
      deleteIntervalBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'includeOverlappingIntervals' field.
      * @return The value.
      */
    public boolean getIncludeOverlappingIntervals() {
      return includeOverlappingIntervals;
    }


    /**
      * Sets the value of the 'includeOverlappingIntervals' field.
      * @param value The value of 'includeOverlappingIntervals'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder setIncludeOverlappingIntervals(boolean value) {
      validate(fields()[2], value);
      this.includeOverlappingIntervals = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'includeOverlappingIntervals' field has been set.
      * @return True if the 'includeOverlappingIntervals' field has been set, false otherwise.
      */
    public boolean hasIncludeOverlappingIntervals() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'includeOverlappingIntervals' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder clearIncludeOverlappingIntervals() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'format' field.
      * @return The value.
      */
    public java.lang.CharSequence getFormat() {
      return format;
    }


    /**
      * Sets the value of the 'format' field.
      * @param value The value of 'format'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder setFormat(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.format = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'format' field has been set.
      * @return True if the 'format' field has been set, false otherwise.
      */
    public boolean hasFormat() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'format' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder clearFormat() {
      format = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'parts' field.
      * @return The value.
      */
    public java.util.List<Energistics.Etp.v12.Datatypes.Object.ObjectPart> getParts() {
      return parts;
    }


    /**
      * Sets the value of the 'parts' field.
      * @param value The value of 'parts'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder setParts(java.util.List<Energistics.Etp.v12.Datatypes.Object.ObjectPart> value) {
      validate(fields()[4], value);
      this.parts = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'parts' field has been set.
      * @return True if the 'parts' field has been set, false otherwise.
      */
    public boolean hasParts() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'parts' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.ReplacePartsByRange.Builder clearParts() {
      parts = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ReplacePartsByRange build() {
      try {
        ReplacePartsByRange record = new ReplacePartsByRange();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (deleteIntervalBuilder != null) {
          try {
            record.deleteInterval = this.deleteIntervalBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("deleteInterval"));
            throw e;
          }
        } else {
          record.deleteInterval = fieldSetFlags()[1] ? this.deleteInterval : (Energistics.Etp.v12.Datatypes.Object.IndexInterval) defaultValue(fields()[1]);
        }
        record.includeOverlappingIntervals = fieldSetFlags()[2] ? this.includeOverlappingIntervals : (java.lang.Boolean) defaultValue(fields()[2]);
        record.format = fieldSetFlags()[3] ? this.format : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.parts = fieldSetFlags()[4] ? this.parts : (java.util.List<Energistics.Etp.v12.Datatypes.Object.ObjectPart>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ReplacePartsByRange>
    WRITER$ = (org.apache.avro.io.DatumWriter<ReplacePartsByRange>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ReplacePartsByRange>
    READER$ = (org.apache.avro.io.DatumReader<ReplacePartsByRange>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










