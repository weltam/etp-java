/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Protocol.GrowingObject;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GetParts extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2711844869983115217L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GetParts\",\"namespace\":\"Energistics.Etp.v12.Protocol.GrowingObject\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"format\",\"type\":\"string\",\"default\":\"xml\"},{\"name\":\"uids\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}],\"protocol\":\"6\",\"messageType\":\"3\",\"senderRole\":\"customer\",\"protocolRoles\":\"store,customer\",\"multipartFlag\":false,\"fullName\":\"Energistics.Etp.v12.Protocol.GrowingObject.GetParts\",\"depends\":[]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GetParts> ENCODER =
      new BinaryMessageEncoder<GetParts>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GetParts> DECODER =
      new BinaryMessageDecoder<GetParts>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GetParts> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GetParts> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GetParts> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GetParts>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GetParts to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GetParts from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GetParts instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GetParts fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence uri;
   private java.lang.CharSequence format;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> uids;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GetParts() {}

  /**
   * All-args constructor.
   * @param uri The new value for uri
   * @param format The new value for format
   * @param uids The new value for uids
   */
  public GetParts(java.lang.CharSequence uri, java.lang.CharSequence format, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> uids) {
    this.uri = uri;
    this.format = format;
    this.uids = uids;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return format;
    case 2: return uids;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: format = (java.lang.CharSequence)value$; break;
    case 2: uids = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return The value of the 'uri' field.
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'format' field.
   * @return The value of the 'format' field.
   */
  public java.lang.CharSequence getFormat() {
    return format;
  }


  /**
   * Sets the value of the 'format' field.
   * @param value the value to set.
   */
  public void setFormat(java.lang.CharSequence value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'uids' field.
   * @return The value of the 'uids' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getUids() {
    return uids;
  }


  /**
   * Sets the value of the 'uids' field.
   * @param value the value to set.
   */
  public void setUids(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.uids = value;
  }

  /**
   * Creates a new GetParts RecordBuilder.
   * @return A new GetParts RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder newBuilder() {
    return new Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder();
  }

  /**
   * Creates a new GetParts RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GetParts RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder newBuilder(Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder();
    } else {
      return new Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder(other);
    }
  }

  /**
   * Creates a new GetParts RecordBuilder by copying an existing GetParts instance.
   * @param other The existing instance to copy.
   * @return A new GetParts RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder newBuilder(Energistics.Etp.v12.Protocol.GrowingObject.GetParts other) {
    if (other == null) {
      return new Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder();
    } else {
      return new Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder(other);
    }
  }

  /**
   * RecordBuilder for GetParts instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GetParts>
    implements org.apache.avro.data.RecordBuilder<GetParts> {

    private java.lang.CharSequence uri;
    private java.lang.CharSequence format;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> uids;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.format)) {
        this.format = data().deepCopy(fields()[1].schema(), other.format);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.uids)) {
        this.uids = data().deepCopy(fields()[2].schema(), other.uids);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing GetParts instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Protocol.GrowingObject.GetParts other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.format)) {
        this.format = data().deepCopy(fields()[1].schema(), other.format);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.uids)) {
        this.uids = data().deepCopy(fields()[2].schema(), other.uids);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'uri' field.
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'format' field.
      * @return The value.
      */
    public java.lang.CharSequence getFormat() {
      return format;
    }


    /**
      * Sets the value of the 'format' field.
      * @param value The value of 'format'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder setFormat(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.format = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'format' field has been set.
      * @return True if the 'format' field has been set, false otherwise.
      */
    public boolean hasFormat() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'format' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder clearFormat() {
      format = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'uids' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getUids() {
      return uids;
    }


    /**
      * Sets the value of the 'uids' field.
      * @param value The value of 'uids'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder setUids(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.uids = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'uids' field has been set.
      * @return True if the 'uids' field has been set, false otherwise.
      */
    public boolean hasUids() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'uids' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetParts.Builder clearUids() {
      uids = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GetParts build() {
      try {
        GetParts record = new GetParts();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.format = fieldSetFlags()[1] ? this.format : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.uids = fieldSetFlags()[2] ? this.uids : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GetParts>
    WRITER$ = (org.apache.avro.io.DatumWriter<GetParts>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GetParts>
    READER$ = (org.apache.avro.io.DatumReader<GetParts>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.uri);

    out.writeString(this.format);

    long size0 = this.uids.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.uids.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.CharSequence v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);

      this.format = in.readString(this.format instanceof Utf8 ? (Utf8)this.format : null);

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.uids; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
        this.uids = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.CharSequence v0 = null;
          v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
          m0.put(k0, v0);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          break;

        case 1:
          this.format = in.readString(this.format instanceof Utf8 ? (Utf8)this.format : null);
          break;

        case 2:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.uids; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
            this.uids = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.CharSequence v0 = null;
              v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
              m0.put(k0, v0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










