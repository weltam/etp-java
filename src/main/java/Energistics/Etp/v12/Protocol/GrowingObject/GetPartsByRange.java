/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Energistics.Etp.v12.Protocol.GrowingObject;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GetPartsByRange extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2795821441604690009L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GetPartsByRange\",\"namespace\":\"Energistics.Etp.v12.Protocol.GrowingObject\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"format\",\"type\":\"string\",\"default\":\"xml\"},{\"name\":\"indexInterval\",\"type\":{\"type\":\"record\",\"name\":\"IndexInterval\",\"namespace\":\"Energistics.Etp.v12.Datatypes.Object\",\"fields\":[{\"name\":\"startIndex\",\"type\":{\"type\":\"record\",\"name\":\"IndexValue\",\"namespace\":\"Energistics.Etp.v12.Datatypes\",\"fields\":[{\"name\":\"item\",\"type\":[\"null\",\"long\",\"double\",{\"type\":\"record\",\"name\":\"PassIndexedDepth\",\"namespace\":\"Energistics.Etp.v12.Datatypes.ChannelData\",\"fields\":[{\"name\":\"pass\",\"type\":\"long\"},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"PassDirection\",\"symbols\":[\"Up\",\"HoldingSteady\",\"Down\"],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.PassDirection\",\"depends\":[]}},{\"name\":\"depth\",\"type\":\"double\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.ChannelData.PassIndexedDepth\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ChannelData.PassDirection\"]}]}],\"fullName\":\"Energistics.Etp.v12.Datatypes.IndexValue\",\"depends\":[\"Energistics.Etp.v12.Datatypes.ChannelData.PassIndexedDepth\"]}},{\"name\":\"endIndex\",\"type\":\"Energistics.Etp.v12.Datatypes.IndexValue\"},{\"name\":\"uom\",\"type\":\"string\"},{\"name\":\"depthDatum\",\"type\":\"string\",\"default\":\"\"}],\"fullName\":\"Energistics.Etp.v12.Datatypes.Object.IndexInterval\",\"depends\":[\"Energistics.Etp.v12.Datatypes.IndexValue\",\"Energistics.Etp.v12.Datatypes.IndexValue\"]}},{\"name\":\"includeOverlappingIntervals\",\"type\":\"boolean\"}],\"protocol\":\"6\",\"messageType\":\"4\",\"senderRole\":\"customer\",\"protocolRoles\":\"store,customer\",\"multipartFlag\":false,\"fullName\":\"Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange\",\"depends\":[\"Energistics.Etp.v12.Datatypes.Object.IndexInterval\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GetPartsByRange> ENCODER =
      new BinaryMessageEncoder<GetPartsByRange>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GetPartsByRange> DECODER =
      new BinaryMessageDecoder<GetPartsByRange>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GetPartsByRange> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GetPartsByRange> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GetPartsByRange> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GetPartsByRange>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GetPartsByRange to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GetPartsByRange from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GetPartsByRange instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GetPartsByRange fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence uri;
   private java.lang.CharSequence format;
   private Energistics.Etp.v12.Datatypes.Object.IndexInterval indexInterval;
   private boolean includeOverlappingIntervals;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GetPartsByRange() {}

  /**
   * All-args constructor.
   * @param uri The new value for uri
   * @param format The new value for format
   * @param indexInterval The new value for indexInterval
   * @param includeOverlappingIntervals The new value for includeOverlappingIntervals
   */
  public GetPartsByRange(java.lang.CharSequence uri, java.lang.CharSequence format, Energistics.Etp.v12.Datatypes.Object.IndexInterval indexInterval, java.lang.Boolean includeOverlappingIntervals) {
    this.uri = uri;
    this.format = format;
    this.indexInterval = indexInterval;
    this.includeOverlappingIntervals = includeOverlappingIntervals;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return format;
    case 2: return indexInterval;
    case 3: return includeOverlappingIntervals;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: format = (java.lang.CharSequence)value$; break;
    case 2: indexInterval = (Energistics.Etp.v12.Datatypes.Object.IndexInterval)value$; break;
    case 3: includeOverlappingIntervals = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return The value of the 'uri' field.
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'format' field.
   * @return The value of the 'format' field.
   */
  public java.lang.CharSequence getFormat() {
    return format;
  }


  /**
   * Sets the value of the 'format' field.
   * @param value the value to set.
   */
  public void setFormat(java.lang.CharSequence value) {
    this.format = value;
  }

  /**
   * Gets the value of the 'indexInterval' field.
   * @return The value of the 'indexInterval' field.
   */
  public Energistics.Etp.v12.Datatypes.Object.IndexInterval getIndexInterval() {
    return indexInterval;
  }


  /**
   * Sets the value of the 'indexInterval' field.
   * @param value the value to set.
   */
  public void setIndexInterval(Energistics.Etp.v12.Datatypes.Object.IndexInterval value) {
    this.indexInterval = value;
  }

  /**
   * Gets the value of the 'includeOverlappingIntervals' field.
   * @return The value of the 'includeOverlappingIntervals' field.
   */
  public boolean getIncludeOverlappingIntervals() {
    return includeOverlappingIntervals;
  }


  /**
   * Sets the value of the 'includeOverlappingIntervals' field.
   * @param value the value to set.
   */
  public void setIncludeOverlappingIntervals(boolean value) {
    this.includeOverlappingIntervals = value;
  }

  /**
   * Creates a new GetPartsByRange RecordBuilder.
   * @return A new GetPartsByRange RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder newBuilder() {
    return new Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder();
  }

  /**
   * Creates a new GetPartsByRange RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GetPartsByRange RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder newBuilder(Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder other) {
    if (other == null) {
      return new Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder();
    } else {
      return new Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder(other);
    }
  }

  /**
   * Creates a new GetPartsByRange RecordBuilder by copying an existing GetPartsByRange instance.
   * @param other The existing instance to copy.
   * @return A new GetPartsByRange RecordBuilder
   */
  public static Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder newBuilder(Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange other) {
    if (other == null) {
      return new Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder();
    } else {
      return new Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder(other);
    }
  }

  /**
   * RecordBuilder for GetPartsByRange instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GetPartsByRange>
    implements org.apache.avro.data.RecordBuilder<GetPartsByRange> {

    private java.lang.CharSequence uri;
    private java.lang.CharSequence format;
    private Energistics.Etp.v12.Datatypes.Object.IndexInterval indexInterval;
    private Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder indexIntervalBuilder;
    private boolean includeOverlappingIntervals;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.format)) {
        this.format = data().deepCopy(fields()[1].schema(), other.format);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.indexInterval)) {
        this.indexInterval = data().deepCopy(fields()[2].schema(), other.indexInterval);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasIndexIntervalBuilder()) {
        this.indexIntervalBuilder = Energistics.Etp.v12.Datatypes.Object.IndexInterval.newBuilder(other.getIndexIntervalBuilder());
      }
      if (isValidValue(fields()[3], other.includeOverlappingIntervals)) {
        this.includeOverlappingIntervals = data().deepCopy(fields()[3].schema(), other.includeOverlappingIntervals);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing GetPartsByRange instance
     * @param other The existing instance to copy.
     */
    private Builder(Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.format)) {
        this.format = data().deepCopy(fields()[1].schema(), other.format);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.indexInterval)) {
        this.indexInterval = data().deepCopy(fields()[2].schema(), other.indexInterval);
        fieldSetFlags()[2] = true;
      }
      this.indexIntervalBuilder = null;
      if (isValidValue(fields()[3], other.includeOverlappingIntervals)) {
        this.includeOverlappingIntervals = data().deepCopy(fields()[3].schema(), other.includeOverlappingIntervals);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'uri' field.
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'format' field.
      * @return The value.
      */
    public java.lang.CharSequence getFormat() {
      return format;
    }


    /**
      * Sets the value of the 'format' field.
      * @param value The value of 'format'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder setFormat(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.format = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'format' field has been set.
      * @return True if the 'format' field has been set, false otherwise.
      */
    public boolean hasFormat() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'format' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder clearFormat() {
      format = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'indexInterval' field.
      * @return The value.
      */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval getIndexInterval() {
      return indexInterval;
    }


    /**
      * Sets the value of the 'indexInterval' field.
      * @param value The value of 'indexInterval'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder setIndexInterval(Energistics.Etp.v12.Datatypes.Object.IndexInterval value) {
      validate(fields()[2], value);
      this.indexIntervalBuilder = null;
      this.indexInterval = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'indexInterval' field has been set.
      * @return True if the 'indexInterval' field has been set, false otherwise.
      */
    public boolean hasIndexInterval() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'indexInterval' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder getIndexIntervalBuilder() {
      if (indexIntervalBuilder == null) {
        if (hasIndexInterval()) {
          setIndexIntervalBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.newBuilder(indexInterval));
        } else {
          setIndexIntervalBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.newBuilder());
        }
      }
      return indexIntervalBuilder;
    }

    /**
     * Sets the Builder instance for the 'indexInterval' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder setIndexIntervalBuilder(Energistics.Etp.v12.Datatypes.Object.IndexInterval.Builder value) {
      clearIndexInterval();
      indexIntervalBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'indexInterval' field has an active Builder instance
     * @return True if the 'indexInterval' field has an active Builder instance
     */
    public boolean hasIndexIntervalBuilder() {
      return indexIntervalBuilder != null;
    }

    /**
      * Clears the value of the 'indexInterval' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder clearIndexInterval() {
      indexInterval = null;
      indexIntervalBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'includeOverlappingIntervals' field.
      * @return The value.
      */
    public boolean getIncludeOverlappingIntervals() {
      return includeOverlappingIntervals;
    }


    /**
      * Sets the value of the 'includeOverlappingIntervals' field.
      * @param value The value of 'includeOverlappingIntervals'.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder setIncludeOverlappingIntervals(boolean value) {
      validate(fields()[3], value);
      this.includeOverlappingIntervals = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'includeOverlappingIntervals' field has been set.
      * @return True if the 'includeOverlappingIntervals' field has been set, false otherwise.
      */
    public boolean hasIncludeOverlappingIntervals() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'includeOverlappingIntervals' field.
      * @return This builder.
      */
    public Energistics.Etp.v12.Protocol.GrowingObject.GetPartsByRange.Builder clearIncludeOverlappingIntervals() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GetPartsByRange build() {
      try {
        GetPartsByRange record = new GetPartsByRange();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.format = fieldSetFlags()[1] ? this.format : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (indexIntervalBuilder != null) {
          try {
            record.indexInterval = this.indexIntervalBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("indexInterval"));
            throw e;
          }
        } else {
          record.indexInterval = fieldSetFlags()[2] ? this.indexInterval : (Energistics.Etp.v12.Datatypes.Object.IndexInterval) defaultValue(fields()[2]);
        }
        record.includeOverlappingIntervals = fieldSetFlags()[3] ? this.includeOverlappingIntervals : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GetPartsByRange>
    WRITER$ = (org.apache.avro.io.DatumWriter<GetPartsByRange>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GetPartsByRange>
    READER$ = (org.apache.avro.io.DatumReader<GetPartsByRange>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










